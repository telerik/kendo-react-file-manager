{"version":3,"sources":["helpers/helperMethods.tsx","components/FileManagerToolbar.tsx","components/GridView.tsx","components/ListView.tsx","components/FileInformation.tsx","components/FolderTree.tsx","components/Breadcrumb.tsx","components/Dialog.tsx","data/data.ts","components/ContextMenu.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["convertExtensionToIcon","item","split","icon","type","convertDateFormat","date","intl","formatDate","formatData","data","newData","forEach","itemDate","dateCreated","push","path","name","size","items","addNewData","convertToTreeData","selectedItem","treeData","includes","expanded","selected","Date","undefined","length","clearData","gridData","searchTreeItem","curItem","Array","isArray","i","searchTreeItemByName","newItem","deepCopy","JSON","parse","stringify","FOLDER_NAME_COUNTER","addFolder","updatedData","clone","folderName","toggleViewBtnGroup","btnGroupState","view","listView","gridView","toggleSortBtnGroup","curState","sortDesc","sortAsc","formatBytes","bytes","decimals","k","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","editDataItem","newName","dateModified","array","removeDataItem","convertToBreadcrumbData","id","iconClass","newPath","FileManagerToolbar","props","React","dialogVisibility","setDialogVisibility","viewBtnGroup","setViewBtnGroup","handleDialogVisibility","event","handleFileChange","onFileChange","files","newState","className","onClick","onNewFolderClick","title","onClose","contentStyle","width","batch","multiple","withCredentials","onAdd","onRemove","onProgress","onStatusChange","saveUrl","removeUrl","layout","onClearFileList","primary","onUploadDone","togglable","sort","dir","newBtnGroupState","onSortChange","direction","sortValue","text","splitItems","onItemClick","onViewChange","viewValue","defaultChecked","onChange","onSwitchChange","placeholder","onSearchChange","DateCreatedCell","useInternationalization","field","dataItem","navigationAttributes","useTableKeyboardNavigation","GRID_COL_INDEX_ATTRIBUTE","columnIndex","SizeCell","GridView","handleContextMenu","onContextMenu","rowRender","trElement","trProps","preventDefault","children","style","height","navigatable","sortable","allowUnsort","selectedField","selectable","enabled","cell","drag","mode","dataItemKey","onRowClick","onSelectionChange","onRowDoubleClick","onDoubleClick","ListView","map","iconObject","classNames","handleClick","handleDoubleClick","FileInformation","MultipleSelectionRendering","FileSelectionRendering","NoDataRendering","border","FolderTree","handleEdit","onItemEdit","handleBlur","onItemBlur","tree","edit","autoFocus","value","e","onBlur","textField","expandIcons","onExpandChange","BreadcrumbComponent","onItemSelect","onBreadcrumbSelect","onKeyDown","EditDialog","editValue","inputValue","setInputValue","handleDialogClick","onDialogClick","target","onDialogClose","margin","textAlign","maxLength","DeleteDialog","serverData","ContextMenu","show","offset","vertical","display","onSelect","onContextMenuCLick","splitterPanes","min","collapsible","initialSort","DATA_ITEM_KEY","SELECTED_FIELD","idGetter","getter","App","stateData","setStateData","panes","setPanes","selectedGridItem","setSelectedGridItem","selectedTreeItem","setSelectedTreeItem","detailsData","setDetailsData","setFiles","contentView","setContentView","contextMenuView","setContextMenuView","left","top","menuOffSet","setMenuOffSet","editDialogView","setEditDialogView","deleteDialogView","setDeleteDialogView","filter","logic","filters","operator","stateContentData","setStateContentData","updateFileDetailsData","selection","curSelectedItem","handleSelectionChange","handleSortChange","newSortedData","handleGridDoubleClick","itemType","newSelectedItem","Object","keys","oldPath","pop","newItemPath","join","newTreeItem","handleListItemClick","newSelectedGridItem","newSelectedTreeItem","handleContextMenuView","clientX","clientY","handleDialogClose","document","addEventListener","gridSelection","key","toString","newPanes","slice","file","extension","addDataItem","nativeEvent","keyCode","process","itemId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0e7692b3.chunk.js","sourcesContent":["import { UploadFileInfo } from '@progress/kendo-react-upload';\nimport { clone } from '@progress/kendo-react-common';\nimport { BreadcrumbDataModel, DataModel, GridViewBtnGroup, SortingBtnGroup } from '../interfaces/FileManagerModels';\n\n// .xlsx && .xls  => excel\n// .jpg && .png   => picture\n// .txt && .doc/x => text\n// no extension   => folder\nexport const convertExtensionToIcon = (item: string | null | undefined) => {\n  if (!item) { return null; }\n  const extension: string | null = item.split('.')[1] || null;\n\n  switch (extension) {\n    case 'xlsx': case 'xls':\n      return {\n        icon: 'k-i-file-data',\n        type: 'Data'\n      };\n    case 'jpg': case 'png': case '.JPG':\n      return {\n        icon: 'k-i-file-image',\n        type: 'Image'\n      };\n    case 'txt': case 'doc': case 'docx':\n      return {\n        icon: 'k-i-file-txt',\n        type: 'Text'\n      };\n    case 'mp3': case 'mp4': case 'mp':\n    return {\n      icon: 'k-i-audio',\n      type: 'Text'\n    };\n    case null:\n      return {\n        icon: 'k-i-folder',\n        type: 'Folder'\n      };\n    default:\n      return {\n        icon: 'k-i-file k-i-file-vertical',\n        type: 'Folder'\n      };\n  };\n};\n\nexport const convertDateFormat = (date: Date | null, intl) => {\n  return date ? intl.formatDate(date, 'd.MM.y  h:mm:ss aa  EEEE') : date;\n};\n\nconst addNewData = (data: DataModel[] | null, intl) => {\n  const newData = [] as DataModel[];\n\n  if (data) {\n    data.forEach(item => {\n      const itemDate: Date = convertDateFormat(item.dateCreated || null, intl);\n  \n      newData.push({\n        path: item.path,\n        name: item.name,\n        dateCreated: itemDate,\n        size: item.size,\n        items: item.items,\n        icon: item.icon\n      })\n    });\n  }\n  return newData;\n};\n\nexport const formatData = (data: DataModel[], intl) => {\n  if (data) {\n    return addNewData(data, intl);\n  }\n  return [];\n};\n\nexport const convertToTreeData = (data: DataModel[], selectedItem: DataModel | null = null) => {\n  const treeData = [] as DataModel[];\n\n  data.forEach(item => {\n    if (item.name && !item.name.includes('.')) {\n      treeData.push({\n        path: item.path,\n        name: item.name,\n        expanded: item.expanded,\n        selected: selectedItem ? selectedItem.name === item.name : false,\n        dateCreated: new Date(),\n        icon: convertExtensionToIcon(undefined),\n        items: item.items && item.items.length ? convertToTreeData(item.items, selectedItem) : []\n      })\n    }\n  })\n  return treeData;\n};\n\nexport const clearData = (data: DataModel[], selectedItem: DataModel | null = null) => {\n  const gridData = [] as DataModel[];\n\n  data.forEach(item => {\n    if (item.name) {\n      gridData.push({\n        ...item,\n        items: item.items && item.items.length ? clearData(item.items, selectedItem) : []\n      })\n    }\n  })\n  return gridData;\n};\n\nexport const searchTreeItem = (data: DataModel, curItem: DataModel | null) => {\n  if (!curItem) { return data; }\n\n  if (Array.isArray(data)) {\n    for (let i = 0; i < data.length; i++) {\n      let item: DataModel = searchTreeItem(data[i], curItem);\n      if (item) {\n        return item;\n      }\n    }\n  } else if (typeof data === 'object') {\n    if (data.path !== undefined && data.path === curItem.path) {\n      return data;\n    }\n  }\n  if (data.items !== undefined && data.items.length > 0) {\n    return searchTreeItem(data.items, curItem);\n  } else {\n    return null;\n  }\n};\n\nexport const searchTreeItemByName = (data, selectedItem: DataModel | null) => {\n  if (!selectedItem) { return data; }\n \n  for (let i = 0; i < data.length; i++) {\n    if (data[i].name === selectedItem.name) { return data[i]; }\n  }\n\n  for (let i = 0; i < data.length; i++) {\n      if (data[i].items?.length) {\n\n        const newItem = searchTreeItemByName(data[i].items, selectedItem);\n        if (newItem) { return newItem; }\n      }\n  };\n};\n\nconst deepCopy = (data: DataModel[]) => JSON.parse(JSON.stringify(data));\n\nexport const addDataItem = (data: DataModel | DataModel[], curItem: DataModel | null, files: UploadFileInfo[], intl) => {\n  const updatedData: DataModel | DataModel[] = Array.isArray(data) ? deepCopy(data) : clone(data);\n  const selectedItem = curItem ? clone(curItem) : {};\n\n  if (!curItem && Array.isArray(updatedData)) {\n    files.forEach(file => {\n      updatedData.push({\n        path: `Home/${file.name}`,\n        name: file.name, \n        dateCreated: convertDateFormat(new Date(), intl),\n        size: file.size,\n        icon: convertExtensionToIcon(file.extension)\n      });\n    });\n    return { updatedData, selectedItem };\n  }\n\n  if (Array.isArray(updatedData)) {\n    for (let i = 0; i < updatedData.length; i++) {\n      let item: DataModel = searchTreeItem(updatedData[i], selectedItem);\n      if (item) {\n        files.forEach(file => {\n          if (!item.items) {\n            item.items = [];\n          }\n\n          item.items.push({\n            path: `${item.path}/${file.name}`,\n            name: file.name, \n            dateCreated: convertDateFormat(new Date(), intl),\n            size: file.size,\n            icon: convertExtensionToIcon(file.extension)\n          });\n          selectedItem.items = item.items;\n        });\n      }\n    }\n    return { updatedData, selectedItem };\n  } else if (typeof updatedData === 'object') {\n    if (updatedData.name !== undefined && updatedData.name === selectedItem.name) {\n      return { updatedData, selectedItem };\n    }\n  }\n  if (updatedData.items !== undefined && updatedData.items.length > 0) {\n    return searchTreeItem(updatedData.items, selectedItem);\n  } else {\n    return null;\n  }\n};\n\nlet FOLDER_NAME_COUNTER = 0;\nexport const addFolder = (data: DataModel, curItem: DataModel | null, intl) => {\n  const updatedData: DataModel | DataModel[] = Array.isArray(data) ? deepCopy(data) : clone(data);\n  const selectedItem = curItem ? clone(curItem) : {};\n\n  if (!curItem && Array.isArray(updatedData)) {\n    const folderName = FOLDER_NAME_COUNTER ? `New Folder (${FOLDER_NAME_COUNTER})` : 'New Folder';\n    FOLDER_NAME_COUNTER++;\n    updatedData.push({\n      path: `Home/${folderName}`,\n      name: folderName, \n      dateCreated: convertDateFormat(new Date(), intl),\n      size: 124,\n      icon: convertExtensionToIcon(undefined)\n    });\n    return updatedData;\n  }\n\n  if (Array.isArray(updatedData)) {\n    for (let i = 0; i < updatedData.length; i++) {\n      let item: DataModel = searchTreeItem(updatedData[i], selectedItem);\n      if (item) {\n        const folderName = FOLDER_NAME_COUNTER ? `New Folder (${FOLDER_NAME_COUNTER})` : 'New Folder';\n        FOLDER_NAME_COUNTER++;\n        if (!item.items) {\n          item.items = [];\n        }\n\n        item.items.push({\n          path: `${item.path}/${folderName}`,\n          name: folderName,\n          dateCreated: convertDateFormat(new Date(), intl),\n          size: 124,\n          icon: convertExtensionToIcon(undefined)\n        });\n\n        return updatedData;\n      }\n    }\n  } else if (typeof data === 'object') {\n    if (data.name !== undefined && data.name === selectedItem.name) {\n      return data;\n    }\n  }\n  if (data.items !== undefined && data.items.length > 0) {\n    return searchTreeItem(data.items, selectedItem);\n  } else {\n    return null;\n  }\n};\n\n// export const convertToBreadcrumbData = (selectedItem: DataModel | null) => {\n//   let path: Object[] = [];\n\n//   if (!selectedItem) { \n//     return [{\n//       id: 'Home',\n//       name: 'Home',\n//       iconClass: 'k-i-home'\n//     }]; \n//   }\n\n//   if (selectedItem.path) {\n//     const items = selectedItem.path.split('/');\n//     for (let i = 0; i < items.length; i++) {\n//       if (items[i] === 'Home') {\n//         path.push({\n//           id: `${i}`,\n//           name: items[i],\n//           iconClass: 'k-i-home'\n//         });\n//       } else {\n//         path.push({\n//           id: `${i}`,\n//           name: items[i]\n//         });\n//       }\n//     }\n//   }\n//   return path;\n// }\n\nexport const toggleViewBtnGroup = (btnGroupState: GridViewBtnGroup, view: string) => {\n  if (!btnGroupState.listView && view !== 'grid') {\n    return { gridView: false, listView: true };\n  }\n  if (!btnGroupState.gridView && view !== 'list') {\n    return { gridView: true, listView: false };\n  }\n  return btnGroupState;\n};\n\nexport const toggleSortBtnGroup = (btnGroupState: SortingBtnGroup, curState: string) => {\n  if (!btnGroupState.sortDesc && curState !== 'asc') {\n    return { sortAsc: false, sortDesc: true };\n  }\n  if (!btnGroupState.sortAsc && curState !== 'desc') {\n    return { sortAsc: true, sortDesc: false };\n  }\n  return btnGroupState;\n};\n\nexport const formatBytes = (bytes: number, decimals: number = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k: number = 1024;\n  const dm: number = decimals < 0 ? 0 : decimals;\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nexport const editDataItem = (data, selectedItem: DataModel, newName: string) => {\n  if (!data) { return; }\n\n  for (let i = 0; i < data.length; i++) {\n    for (let item = 0; item < data.length; item++) {\n      if (data[item].name === selectedItem.name) {\n        data[item].name = newName;\n        data[item].dateModified = new Date();\n        return data;\n      }\n\n      if (data[item].items) {\n        const array = editDataItem(data[item].items, selectedItem, newName);\n        if (array) {\n          return array;\n        }\n      }\n    }\n  }\n};\n\nexport const removeDataItem = (data, selectedItem: DataModel) => {\n  for (let i = 0; i < data.length; i++) {\n    for (let item = 0; item < data.length; item++) {\n      if (data[item].path === selectedItem.path) {\n        data[item] = {};\n        return data;\n      }\n\n      if (data[item].items) {\n        const array = removeDataItem(data[item].items, selectedItem);\n        if (array) {\n          return array;\n        }\n      }\n    }\n  }\n};\n\nexport const convertToBreadcrumbData = (data, selectedItem: DataModel | null, path: BreadcrumbDataModel[] = [{\n    id: 'Home',\n    name: 'Home',\n    iconClass: 'k-i-home'\n  }]) => {\n  if (!selectedItem) {\n    return path;\n  }\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].name === selectedItem.name) {\n      path.push({\n        id: data[i].name,\n        name: data[i].name,\n        items: data[i].items\n      });\n\n      return path;\n    }\n  }\n\n  for (let i = 0; i < data.length; i++) {\n      if (data[i].items?.length) {\n        path.push({\n          id: data[i].name,\n          name: data[i].name,\n          items: data[i].items\n        });\n\n        const newPath = convertToBreadcrumbData(data[i].items, selectedItem, path);\n        if (newPath) {\n          return newPath;\n        } else {\n          path = [{\n            id: 'Home',\n            name: 'Home',\n            iconClass: 'k-i-home'\n          }];\n        }\n      }\n  };\n};\n","import * as React from 'react';\nimport {\n    Toolbar,\n    Button,\n    ButtonGroup,\n    SplitButton,\n    SplitButtonItemClickEvent\n} from '@progress/kendo-react-buttons';\nimport { Switch, Input, InputChangeEvent, SwitchChangeEvent } from \"@progress/kendo-react-inputs\";\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\nimport { Upload } from '@progress/kendo-react-upload';\nimport { BaseEvent } from '@progress/kendo-react-common';\nimport { toggleViewBtnGroup, toggleSortBtnGroup } from '../helpers/helperMethods';\nimport { GridViewBtnGroup, UploadAddEvent } from '../interfaces/FileManagerModels';\n\nexport const FileManagerToolbar = (props) => {\n    const [dialogVisibility, setDialogVisibility] = React.useState<boolean>(false);\n    const [viewBtnGroup, setViewBtnGroup] = React.useState<GridViewBtnGroup>({ gridView: true, listView: false });\n\n    const handleSearchChange = (event: InputChangeEvent) => {\n        props.onSearchChange(event);\n    };\n\n    const handleSwitchChange = (event: SwitchChangeEvent) => {\n        props.onSwitchChange(event);\n    };\n\n    const handleGridViewChange = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (event) {\n            const newBtnGroupState = toggleViewBtnGroup(viewBtnGroup, 'grid');\n            setViewBtnGroup(newBtnGroupState);\n\n            props.onViewChange({\n                viewValue: newBtnGroupState,\n                event: event\n            });\n        }\n    };\n    \n    const handleAscBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (event) {\n            const newBtnGroupState = toggleSortBtnGroup(props.sort[0].dir, 'asc');\n            props.onSortChange({\n                direction: 'asc',\n                sortValue: newBtnGroupState,\n                event: event\n            });\n        } \n    };\n\n    const handleDescSortBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        const newBtnGroupState = toggleSortBtnGroup(props.sort[0].dir, 'desc');\n        props.onSortChange({\n            direction: 'desc',\n            sortValue: newBtnGroupState,\n            event: event\n        });\n    };\n\n    const handleListViewChange = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (event) {\n            const newBtnGroupState = toggleViewBtnGroup(viewBtnGroup, 'list');\n            setViewBtnGroup(newBtnGroupState);\n\n            props.onViewChange({\n                viewValue: newBtnGroupState,\n                event: event\n            });\n        }\n    };\n\n    const handleItemClick = (event: SplitButtonItemClickEvent) => {\n        props.onSortChange(event);\n    };\n\n    const handleNewFolderClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        props.onNewFolderClick(event);\n    }\n\n    const handleDialogVisibility = (event: BaseEvent<Dialog> | React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setDialogVisibility(!dialogVisibility);\n    };\n\n    const handleFileChange = (event: UploadAddEvent) => {\n        props.onFileChange({\n            files: event.newState,\n            event: event\n        });\n    };\n\n    const handleUploadClearList = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        props.onClearFileList(event); \n    };\n\n    const handleUploadDone = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setDialogVisibility(!dialogVisibility);\n        props.onUploadDone(event);\n    };\n\n    return (\n        <Toolbar className=\"k-filemanager-toolbar\">\n            <Button onClick={handleNewFolderClick}>New Folder</Button>\n            <Button onClick={handleDialogVisibility}>Upload</Button>\n            { dialogVisibility &&\n                <Dialog  \n                    title={'Upload Files'}\n                    className={'k-filemanager-upload-dialog'}\n                    onClose={handleDialogVisibility}\n                    contentStyle={{ width: '530px' }}\n                    >\n                    <Upload\n                        batch={false}\n                        multiple={true}\n                        files={props.files}\n                        withCredentials={false}\n                        onAdd={handleFileChange}\n                        onRemove={handleFileChange}\n                        onProgress={handleFileChange}\n                        onStatusChange={handleFileChange}\n                        saveUrl={'https://demos.telerik.com/kendo-ui/service-v4/upload/save'}\n                        removeUrl={'https://demos.telerik.com/kendo-ui/service-v4/upload/remove'}\n                        />\n                    <DialogActionsBar layout={'end'}>\n                        <Button onClick={handleUploadClearList} > Clear List</Button>\n                        <Button primary={true} onClick={handleUploadDone}> Done </Button>\n                    </DialogActionsBar>\n                </Dialog >\n            }\n\n            <ButtonGroup>\n                <Button\n                    className=\"k-toggle-button k-button-icon k-group-start\"\n                    togglable={true}\n                    selected={props.sort[0].dir === 'asc'}\n                    onClick={handleAscBtnClick}\n                    >\n                    <span className=\"k-icon k-i-sort-asc-sm\"></span>\n                </Button>\n                <Button\n                    className=\"k-toggle-button k-button k-button-icon k-group-end\"\n                    togglable={true}\n                    selected={props.sort[0].dir === 'desc'}\n                    onClick={handleDescSortBtnClick}\n                    >\n                    <span className=\"k-icon k-i-sort-desc-sm\"></span>\n                </Button>\n            </ButtonGroup>\n            <SplitButton \n                text={'Sort By'}\n                items={props.splitItems}\n                onItemClick={handleItemClick}\n                >\n            </SplitButton>\n            <ButtonGroup>\n                <Button \n                    className={\"k-toggle-button k-button-icon k-group-start\"}\n                    togglable={true}\n                    selected={viewBtnGroup.gridView}\n                    onClick={handleGridViewChange}\n                    >\n                    <span className=\"k-icon k-i-grid-layout\"></span>\n                </Button>\n                <Button \n                    className={\"k-toggle-button k-button-icon k-group-end\"}\n                    togglable={true}\n                    selected={viewBtnGroup.listView}\n                    onClick={handleListViewChange}\n                    >\n                    <span className=\"k-icon k-i-grid\"></span>\n                </Button>\n            </ButtonGroup>\n            <div className=\"k-spacer\">&nbsp;</div>\n            <div className=\"k-filemanager-details-toggle\">\n                <label>View Details</label>\n                <Switch defaultChecked={true} onChange={handleSwitchChange} >\n                    <Input type=\"checkbox\"/>\n                    <span className=\"k-switch-container\">\n                        <span className=\"k-switch-label-on\">On</span>\n                        <span className=\"k-switch-label-off\">Off</span>\n                        <span className=\"k-switch-handle\"></span>\n                    </span>\n                </Switch>\n            </div>\n            <div className=\"k-filemanager-search-tool k-textbox k-toolbar-last-visible\" >\n                <Input className=\"k-input\" placeholder=\"Search\" onChange={handleSearchChange}/>\n                <span className=\"k-input-icon\">\n                    <span className=\"k-icon k-i-search\"></span>\n                </span>\n            </div>\n        </Toolbar>\n    );\n}\n","import * as React from 'react';\nimport { \n  Grid,\n  GridCellProps,\n  GridColumn as Column,\n  GridKeyDownEvent,\n  GridRowDoubleClickEvent,\n  GridSelectionChangeEvent,\n  GridSortChangeEvent,\n  GRID_COL_INDEX_ATTRIBUTE\n} from '@progress/kendo-react-grid';\nimport { useTableKeyboardNavigation } from \"@progress/kendo-react-data-tools\";\nimport { clearData, convertDateFormat, formatBytes } from '../helpers/helperMethods';\nimport { useInternationalization } from '@progress/kendo-react-intl';\n\nconst DateCreatedCell  = (props: GridCellProps) => {\n  const intl = useInternationalization();\n\n  const field: string = props.field || \"\";\n  const date: Date = props.dataItem[field];\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      {date === null ? \"\" : convertDateFormat(date, intl)}\n    </td>\n  );\n};\n\nconst SizeCell = (props: GridCellProps) => {\n  const field: string = props.field || \"\";\n  const size: number = props.dataItem[field];\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      {size === null ? \"\" : formatBytes(size)}\n    </td>\n  );\n};\n\nexport const GridView = (props) => {\n  const RowRender = (trElement, dataItem) => {\n    const trProps = {\n      onContextMenu: (event) => {\n        event.preventDefault()\n        handleContextMenu(event, dataItem);\n      }\n    }\n    return React.cloneElement(trElement, { ...trProps }, trElement.props.children);\n  };\n  \n  const handleOnSortChange = (event: GridSortChangeEvent) => {\n    props.onSortChange({\n      sort: event.sort,\n      event: event\n    });\n  };\n\n  const handleSelectionChange = (event) => {\n    props.onSelectionChange(event);\n  }\n\n  const handleDoubleClick = (event: GridRowDoubleClickEvent) => {\n    props.onDoubleClick(event);\n  };\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, dataItem) => {\n    props.onContextMenu({\n      dataItem: dataItem.dataItem,\n      event: event\n    });\n  };\n\n  return (\n    <Grid\n      data={props.data ? clearData(props.data.data) : props.data}\n      rowRender={RowRender}\n      className={\"k-filemanager-grid k-grid-display-block k-editable\"}\n      style={{ height: '100%' }}\n      navigatable={true}\n      sortable={{\n        allowUnsort: false\n      }}\n      sort={props.sort}\n      selectedField={'selected'}\n      selectable={{ enabled: true, cell: false, drag: true, mode: 'single' }}\n      dataItemKey={props.dataItemKey}\n      onRowClick={handleSelectionChange}\n      onSortChange={handleOnSortChange}\n      onRowDoubleClick={handleDoubleClick}\n      >\n      <Column field=\"name\" title=\"Name\" />\n      <Column field=\"dateCreated\" title=\"Date Created\" cell={DateCreatedCell} />\n      <Column field=\"size\" title=\"Size\" cell={SizeCell} />\n    </Grid>\n  );\n}\n","import { classNames } from '@progress/kendo-react-common';\nimport { clearData, convertExtensionToIcon } from '../helpers/helperMethods';\nimport { DataModel, IconType } from './../interfaces/FileManagerModels';\n\nexport const ListView = (props) => {\n    const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n        props.onItemClick({\n            dataItem: item,\n            event: event\n        });\n    };\n    \n    const handleDoubleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n        props.onDoubleClick({\n            dataItem: item,\n            event: event\n        });\n    };\n    \n    const handleContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n        event.preventDefault();\n        props.onContextMenu({\n            dataItem: item,\n            event: event\n        });\n    };\n\n    return (\n        <div className=\"k-listview k-selectable k-filemanager-listview\">\n          <div className=\"k-listview-content k-d-flex k-flex-row k-flex-wrap\">\n              { props.data \n                ? clearData(props.data.data).map((item: any) => {\n                    const iconObject: IconType | null = convertExtensionToIcon(item.name);\n                    return (\n                    <>\n                        <div className={classNames(\"k-listview-item\", { \"k-state-selected\": item.selected })}\n                            onClick={event => handleClick(event, item)}\n                            onDoubleClick={event => handleDoubleClick(event, item)}\n                            onContextMenu={event => handleContextMenu(event, item)}\n                            >\n                        <span className=\"k-file-preview\">\n                            <span className={classNames(\"k-file-icon k-icon\", iconObject ? iconObject.icon : '')} />\n                        </span>\n                        <span className=\"k-file-name\">{item.name}</span>\n                        </div>\n                    </>\n                    )\n                }) \n            : '' }\n            </div>\n        </div>\n    );\n}\n","import { useInternationalization } from '@progress/kendo-react-intl';\nimport { convertDateFormat, convertExtensionToIcon, formatBytes } from '../helpers/helperMethods';\nimport { classNames } from '@progress/kendo-react-common';\nimport { DataModel, IconType } from '../interfaces/FileManagerModels';\n\nexport const FileInformation = (props) => {\n    return (\n        props.data\n            ? typeof props.data === 'number' ? MultipleSelectionRendering(props.data) : FileSelectionRendering(props.data)\n            : NoDataRendering());\n}\n\nconst NoDataRendering = () => {\n    return (\n        <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n            <div className=\"k-file-info\">\n                <span className=\"k-file-preview\"><span className=\"k-file-icon k-icon k-i-none\"></span></span>\n                <span className=\"k-file-name k-no-file-selected\">No File Selected</span>\n            </div>\n        </div>\n    )\n}\n\nconst FileSelectionRendering = (data: DataModel) => {\n    const intl = useInternationalization();\n    const dateCreated: Date = convertDateFormat(data.dateCreated ? data.dateCreated : null, intl);\n    const dateModified: Date = convertDateFormat(data.dateModified ? data.dateModified : null, intl);\n    const iconObject: IconType | null = convertExtensionToIcon(data.name ? data.name : null);\n    return (\n        <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n            <div className=\"k-file-info\">\n                <span className=\"k-file-preview\">\n                    <span className={classNames(\"k-file-icon k-icon\", iconObject?.icon ? iconObject.icon : '')}></span>\n                </span>\n                <span className=\"k-file-name k-single-file-selected\">{data.name? data.name : ''}</span>\n                <dl className=\"k-file-meta\">\n                    <dt className=\"k-file-meta-label\">Type:  </dt>\n                    <dd className= {\"k-file-meta-value k-file-type\"}> {iconObject?.type ? iconObject.type : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                    <dt className=\"k-file-meta-label\">Size:  </dt>\n                    <dd className=\"k-file-meta-value k-file-size\"> {data.size ? formatBytes(data.size) : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                    <dt className=\"k-file-meta-label\">Date Created:  </dt>\n                    <dd className=\"k-file-meta-value k-file-created\"> {dateCreated ? dateCreated : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                    <dt className=\"k-file-meta-label\">Date Modified:  </dt>\n                    <dd className=\"k-file-meta-value k-file-modified\"> {dateModified ? dateModified : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                </dl>\n            </div>\n        </div>\n    );\n}\n\nconst MultipleSelectionRendering = (length: number) => {\n    return (\n        <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n            <div className=\"k-file-info\">\n                <span className=\"k-file-preview\" style={{ width: '100%', border: 0 }}>\n                    <span className=\"k-file-icon k-icon k-i-file\"></span></span>\n                <span className=\"k-file-name k-multiple-files-selected\">{length} items</span>\n            </div>\n        </div>\n    );\n}\n","import { ItemRenderProps, TreeView, TreeViewExpandChangeEvent, TreeViewItemClickEvent } from '@progress/kendo-react-treeview'\nimport { DataModel } from '../interfaces/FileManagerModels';\n\nexport const FolderTree = (props) => {\n    const handleEdit = (event: React.ChangeEvent<HTMLInputElement>, item: DataModel) => {\n        props.onItemEdit({\n            item: item,\n            event: event\n        });\n    };\n\n    const handleBlur = (event: React.ChangeEvent<HTMLInputElement>, item: DataModel) => {\n        props.onItemBlur({\n            item: item,\n            event: event\n        });\n    };\n\n    const handleExpandChange = (event: TreeViewExpandChangeEvent) => {\n        event.item.expanded = !event.item.expanded;\n    };\n\n    const handleItemClick = (event: TreeViewItemClickEvent) => {\n        if (event.item) {\n            props.onItemClick({\n                item: event.item,\n                event: event\n            });\n        }\n    };\n\n    const handleContextMenu = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>, item: DataModel) => {\n        event.preventDefault();\n        props.onContextMenu({\n            tree: true,\n            dataItem: item,\n            event: event\n        });\n    };\n\n    const TreeViewItem = (props: ItemRenderProps) => {\n        if (props.item.edit) {\n            return (\n                <span>\n                <input className='k-textbox'\n                    autoFocus\n                    value={props.item.text}\n                    onChange={(e) => handleEdit(e, props.item)}\n                    onBlur={(e) => handleBlur(e, props.item)} />\n                </span>\n            );\n        }\n        return (\n            <span onContextMenu={(event) => handleContextMenu(event, props.item)}>{props.item.name}</span>\n        );\n    };\n\n    return (\n        <TreeView\n            data={props.data}\n            item={TreeViewItem}\n            className=\"k-filemanager-treeview\"\n            textField=\"name\"\n            expandIcons={true}\n            onExpandChange={handleExpandChange}\n            onItemClick={handleItemClick}\n        /> \n    );\n}\n","import { Breadcrumb, BreadcrumbLinkMouseEvent, BreadcrumbLinkKeyDownEvent } from '@progress/kendo-react-layout';\n\nexport const BreadcrumbComponent = (props) => {\n    const handleItemSelect = (event: BreadcrumbLinkMouseEvent) => {\n        props.onBreadcrumbSelect(event);\n    };\n\n    const handleKeyDown = (event: BreadcrumbLinkKeyDownEvent) => {\n      props.onBreadcrumbSelect(event);\n    };\n\n    return (\n        <Breadcrumb \n          data={props.data ? props.data : ''}\n          textField={'name'}\n          onItemSelect={handleItemSelect}\n          onKeyDown={handleKeyDown}\n          />\n    );\n};\n","import { Dialog as DialogComponent, DialogActionsBar, DialogCloseEvent } from '@progress/kendo-react-dialogs';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\nimport * as React from 'react';\n\nexport const EditDialog = (props) => {\n    const [inputValue, setInputValue] = React.useState(props.editValue);\n\n    const handleDialogClick = (event) => {\n        props.onDialogClick({\n            event,\n            value: inputValue,\n            type: event.target.value\n        });\n    };\n\n    const handleDialogClose = (event: DialogCloseEvent) => {\n        props.onDialogClose(event);\n    };\n\n    const handleInputChange = (event: InputChangeEvent) => {\n        setInputValue(event.value);\n    };\n\n    return (\n        <DialogComponent title={'Please confirm'} onClose={handleDialogClose}>\n            <p style={{ width: '350px', margin: '25px', textAlign: 'center' }}>Enter new name for the file.</p>\n            <Input\n                maxLength={40}\n                value={inputValue.name}\n                style={{ width: '350px', margin: '25px', textAlign: 'center' }}\n                className={'k-textbox'}\n                onChange={handleInputChange}\n                />\n          <DialogActionsBar>\n            <button value={'rename'} className='k-button k-state-selected' onClick={handleDialogClick}>Rename</button>\n            <button value={'cancel'} className='k-button' onClick={handleDialogClick}>Cancel</button>\n          </DialogActionsBar>\n        </DialogComponent>\n    );\n};\n\nexport const DeleteDialog = (props) => {\n    const handleDialogClick = (event) => {\n        props.onDialogClick({\n            event,\n            type: event.target.value\n        });\n    };\n\n    const handleDialogClose = (event) => {\n        props.onDialogClose(event);\n    };\n\n    return (\n        <DialogComponent title={'Please confirm'} onClose={handleDialogClose}>\n          <p style={{ width: '350px', margin: '25px', textAlign: 'center' }}>Are you sure you want to delete the selected file? You cannot undo this action.</p>\n          <DialogActionsBar>\n            <button value={'delete'} className='k-button k-state-selected' onClick={handleDialogClick}>Delete</button>\n            <button value={'cancel'} className='k-button' onClick={handleDialogClick}>Cancel</button>\n          </DialogActionsBar>\n        </DialogComponent>\n    );\n};\n","import { DataModel } from \"../interfaces/FileManagerModels\";\n\nexport const serverData: DataModel[] = [\n  {\n    path: \"Home/Pictures.jpg\",\n    name: \"Pictures.jpg\",\n    size: 0,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: []\n  }, {\n    path: \"Home/Documents\",\n    name: \"Documents\",\n    size: 100000,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        path: \"Home/Documents/Image.jpg\",\n        name: \"Image.jpg\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        path: \"Home/Documents/shared\",\n        name: \"shared\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            path: \"Home/Documents/shared/wave.jpg\",\n            name: \"wave.jpg\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          },\n          {\n            path: \"Home/Documents/shared/wave\",\n            name: \"wave\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        path: \"Home/Documents/Anime.jpg\",\n        name: \"Anime.jpg\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  }, {\n    path: \"Home/Pictures\",\n    name: \"Pictures\",\n    size: 0,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        path: \"Home/Pictures/Vacation\",\n        name: \"Vacation\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        path: \"Home/Pictures/Bulgaria\",\n        name: \"Bulgaria\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            path: \"Home/Pictures/Bulgaria/sea.jpg\",\n            name: \"sea.jpg\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        path: \"Home/Pictures/view.jpg\",\n        name: \"view.jpg\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  },\n  {\n    path: \"Home/Music\",\n    name: \"Music\",\n    size: 0,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        path: \"Home/Music/music.mp3\",\n        name: \"music.mp3\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        path: \"Home/Music/new\",\n        name: \"new\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            path: \"Home/Music/new/real.mp3\",\n            name: \"real.mp3\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          },\n          {\n            path: \"Home/Music/new/shakira.mp3\",\n            name: \"shakira.mp3\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        path: \"Home/Music/home.jpg\",\n        name: \"home.jpg\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  }\n];\n","\nimport { Menu, MenuItem, MenuSelectEvent } from '@progress/kendo-react-layout';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { ContextMenuProps } from '../interfaces/FileManagerModels';\n\nexport const ContextMenu = (props: ContextMenuProps) => {\n  const handleSelection = (event:  MenuSelectEvent) => {\n    props.onContextMenuCLick(event);\n  };\n\n  return (\n    <Popup show={true} offset={props.offset}>\n        <Menu vertical={true} style={{ display: 'inline-block' }} onSelect={handleSelection}>\n            <MenuItem text=\"Rename\" icon={'k-icon k-i-edit'} />\n            <MenuItem text=\"Delete\" icon={'k-icon k-i-delete'} />\n        </Menu>\n    </Popup>\n  );\n}\n","import * as React from 'react';\n\nimport { Splitter, SplitterOnChangeEvent, BreadcrumbLinkMouseEvent } from '@progress/kendo-react-layout';\nimport { useInternationalization } from '@progress/kendo-react-intl';\nimport { process, SortDescriptor, State } from '@progress/kendo-data-query';\nimport { clone, getter } from '@progress/kendo-react-common';\nimport { GridRowDoubleClickEvent } from '@progress/kendo-react-grid';\nimport { UploadFileInfo } from '@progress/kendo-react-upload';\nimport { TreeViewItemClickEvent } from '@progress/kendo-react-treeview';\nimport { InputChangeEvent } from '@progress/kendo-react-inputs';\nimport { Offset } from '@progress/kendo-react-popup';\n\nimport { FileManagerToolbar } from './components/FileManagerToolbar';\nimport { GridView } from './components/GridView';\nimport { ListView } from './components/ListView';\nimport { FileInformation } from './components/FileInformation';\nimport { FolderTree } from './components/FolderTree';\nimport { BreadcrumbComponent } from './components/Breadcrumb';\nimport { DeleteDialog, EditDialog } from './components/Dialog';\n\nimport { serverData } from './data/data';\nimport { \n  DataModel,\n  PanesModel,\n  SplitBtnItems,\n  SelectedItemType,\n  SelectionChangeEvent,\n  UploadAddEvent,\n  ViewChangeEvent,\n  SortChangeEvent,\n  AppSwitchChangeEvent,\n  ContextMenuEvent\n} from './interfaces/FileManagerModels';\nimport {\n  formatData,\n  convertToTreeData,\n  searchTreeItem,\n  addDataItem,\n  addFolder,\n  convertExtensionToIcon,\n  convertToBreadcrumbData,\n  removeDataItem,\n  editDataItem,\n  searchTreeItemByName\n} from './helpers/helperMethods';\nimport { ContextMenu } from './components/ContextMenu';\n\nconst splitterPanes: PanesModel[] = [\n  {\n    size: \"20%\",\n    min: \"20px\",\n    collapsible: true,\n  },\n  {},\n  {\n    size: \"30%\",\n    min: \"20px\",\n    collapsible: true,\n  },\n];\n\nconst initialSort: SortDescriptor[] = [{\n  field: 'name',\n  dir: 'asc'\n}];\n\nconst DATA_ITEM_KEY = 'name';\nconst SELECTED_FIELD = \"selected\";\nconst idGetter = getter(DATA_ITEM_KEY);\n\nconst App = () => {\n  const intl = useInternationalization();\n\n  const [stateData, setStateData] = React.useState<DataModel[]>(formatData(serverData, intl));\n  const [panes, setPanes] = React.useState<PanesModel[]>(splitterPanes);\n\n  const [selectedGridItem, setSelectedGridItem] = React.useState<DataModel>({});\n  const [selectedTreeItem, setSelectedTreeItem] = React.useState<DataModel | null>(null);\n\n  const [detailsData, setDetailsData] = React.useState<null | number | Object>(null);\n  const [files, setFiles] = React.useState<UploadFileInfo[]>([]);\n  const [contentView, setContentView] = React.useState<string>(\"grid\");\n  const [contextMenuView, setContextMenuView] = React.useState<boolean>(false);\n  const [menuOffSet, setMenuOffSet] = React.useState<Offset>({left: 0, top: 0});\n  const [editDialogView, setEditDialogView] = React.useState<boolean>(false);\n  const [deleteDialogView, setDeleteDialogView] = React.useState<boolean>(false);\n\n  const splitBtnItems: SplitBtnItems[] = [\n    { text: 'Name', value: 'name' },\n    { text: 'File Size', value: 'size'},\n    { text: 'Date Created', value: 'dateCreated'}\n  ];\n\n  const initialLogic: \"and\" | \"or\" = \"and\";\n \n  const [stateContentData, setStateContentData] = React.useState<State>({\n    sort: initialSort,\n    filter: {\n      logic: initialLogic,\n      filters: [\n        { field: 'name', operator: 'contains', value: '' }\n      ]\n    }\n  });\n\n  const updateFileDetailsData = React.useCallback(\n    (selection: SelectedItemType) => {\n      let curSelectedItem = {};\n\n      if (selection.name) {\n        curSelectedItem = { name: selection.name };\n        setDetailsData(searchTreeItemByName(stateData, curSelectedItem));\n      } else {\n        setDetailsData(null);\n      }\n    },\n    [stateData]\n  );\n\n  const handleTreeItemClick = (event: TreeViewItemClickEvent) => {\n    const newSelectedItem: DataModel = searchTreeItem(stateData, event.item);\n    newSelectedItem.expanded = true;\n\n    setDetailsData(event.item);\n    setSelectedTreeItem(newSelectedItem);\n    setSelectedGridItem({});\n  }\n\n  const handleSplitterChange = (event: SplitterOnChangeEvent) => {\n    setPanes(event.newState);\n  };\n\n  const handleSelectionChange = (event: SelectionChangeEvent) => {\n    setSelectedGridItem(event.dataItem);\n    updateFileDetailsData(event.dataItem);\n  };\n\n  const handleSortChange = (event: SortChangeEvent) => {\n    const newSortedData = clone(stateContentData);\n    \n    if (event.direction === 'asc' || event.direction === 'desc') {\n      newSortedData.sort[0].dir = event.direction;\n    }\n\n    if (event.item) {\n      newSortedData.sort[0].field = event.item.value;\n    }\n\n    if (event.sort) {\n      newSortedData.sort = event.sort;\n    }\n    setStateContentData(newSortedData);\n  };\n\n  const handleGridDoubleClick = (event: GridRowDoubleClickEvent) => {\n    const itemType = convertExtensionToIcon(event.dataItem.name);\n    if (itemType?.type === 'Folder') {\n      if (selectedTreeItem) {\n        selectedTreeItem.expanded = true;\n      }\n\n      const newSelectedItem = event.dataItem;\n      newSelectedItem.expanded = true;\n      setSelectedTreeItem(searchTreeItem(stateData, newSelectedItem));\n    }\n  };\n\n  const handleNewFolderClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let newData;\n    if (selectedTreeItem) {\n      newData = addFolder(stateData, selectedTreeItem, intl);\n    } else {\n      newData = addFolder(stateData, null, intl);\n    }\n\n    setStateData(newData);\n    if (selectedTreeItem) {\n      setSelectedTreeItem(searchTreeItem(newData, selectedTreeItem));\n    }\n  };\n\n  const handleSearchChange = (event: InputChangeEvent) => {\n    setStateContentData({\n        ...stateContentData,\n        filter: {\n          logic: initialLogic,\n          filters: [\n            { field: 'name', operator: 'contains', value: event.value }\n          ]\n        }\n    });\n  };\n\n  const handleSwitchChange = (event: AppSwitchChangeEvent) => {\n    const newPanes: PanesModel[] = panes.slice(0)\n    if (event.value) {\n      newPanes[2].size = '30%';\n      setPanes(newPanes)\n    } else {\n      newPanes[2].size = '0%';\n      setPanes(newPanes)\n    }\n  };\n\n  const handleViewChange = (event: ViewChangeEvent) => {\n    if (event.viewValue.gridView) {\n      setContentView('grid');\n    }\n    if (event.viewValue.listView) {\n      setContentView('list');\n    }\n  };\n\n  const handleFileChange = (event: UploadAddEvent) => {\n    if (event.files) {\n      setFiles(event.files);\n    }\n  };\n\n  const handleClearFileList = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (event) {\n      setFiles([]);\n    }\n  };\n\n  const handleUploadDone = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const data: DataModel | any = addDataItem(stateData, selectedTreeItem, files, intl);\n\n    setStateData(data.updatedData);\n    setSelectedTreeItem(data.selectedItem);\n    setFiles([]);\n  };\n\n  const handleBreadcrumbSelection = (event: BreadcrumbLinkMouseEvent) => {\n    setSelectedGridItem({});\n\n    if (!event.nativeEvent.keyCode) {\n      const newItem = searchTreeItemByName(stateData, { name: event.id });\n      setSelectedTreeItem(newItem);\n    }\n\n    if (event.nativeEvent.keyCode === 13) {\n      const newItem = searchTreeItemByName(stateData, { name: event.id });\n      setSelectedTreeItem(newItem);\n    }\n  };\n\n  const handleDialogClick = (event) => {\n    if (event.type === 'cancel') {\n      setDeleteDialogView(false);\n      setEditDialogView(false);\n    }\n    \n    const curItem: DataModel | null = Object.keys(selectedGridItem).length ? selectedGridItem : selectedTreeItem;\n    if (!curItem) { return; }\n\n    if (event.type === 'delete') {\n      const newItem: string = curItem.path || '';\n      const oldPath = newItem.split('/');\n      \n      oldPath.pop();\n      let newItemPath = oldPath.join('/');\n      \n      const newTreeItem = searchTreeItem(stateData, { path: newItemPath });\n      setSelectedTreeItem(newTreeItem);\n    \n      removeDataItem(stateData, curItem);\n      setDeleteDialogView(false);\n    }\n\n    if (event.type === 'rename') {\n      setEditDialogView(false);\n      const existingItemName = searchTreeItemByName(stateData, { name: event.value });\n\n      if (!existingItemName && curItem.name !== event.value) {\n        if (typeof(event.value) === 'string') {\n          editDataItem(stateData, curItem, event.value);\n        }\n        if (typeof(event.value) === 'object' && event.value.name) {\n          editDataItem(stateData, curItem, event.value.name);\n        }\n      }\n    }\n  };\n\n  const handleListItemClick = (event) => {\n    let newSelectedGridItem = {};\n    if(event.dataItem.name) {\n      newSelectedGridItem = event.dataItem;\n      newSelectedGridItem[event.dataItem.name] = true;\n      newSelectedGridItem['selected'] = true;\n\n      setSelectedGridItem(newSelectedGridItem);\n    }\n\n    if (event.tree) {\n      const newSelectedTreeItem: DataModel = searchTreeItem(stateData, newSelectedGridItem);\n      setSelectedTreeItem(newSelectedTreeItem);\n    }\n    updateFileDetailsData(newSelectedGridItem);\n  };\n\n\n  const handleContextMenuView = (event: ContextMenuEvent) => {\n    setContextMenuView(true);\n    setMenuOffSet({left: event.event.clientX, top: event.event.clientY });\n    handleListItemClick(event);\n  };\n\n  const handleContextMenuClick = (event: ContextMenuEvent) => {\n    if (event.itemId === \"0\") {\n      setEditDialogView(true);\n    } else {\n      setDeleteDialogView(true);\n    }\n  };\n\n  const handleDialogClose = () => {\n    setDeleteDialogView(false);\n    setEditDialogView(false);\n  };\n\n  document.addEventListener(\"click\", () => {\n    setContextMenuView(false);\n  });\n\n  const gridSelection = React.useMemo(\n    () => {\n      if (selectedGridItem.name) {\n        const key = selectedGridItem['name'].toString();\n        return { [key]: true };\n      }\n      return {};\n    }, [selectedGridItem]\n  );\n\n  return (\n     <div className=\"k-widget k-filemanager k-filemanager-resizable\">\n        <div className=\"k-filemanager-header\">\n          <FileManagerToolbar\n            splitItems={splitBtnItems}\n            sort={stateContentData.sort}\n            files={files}\n            onNewFolderClick={handleNewFolderClick}\n            onSearchChange={handleSearchChange}\n            onSwitchChange={handleSwitchChange}\n            onViewChange={handleViewChange}\n            onSortChange={handleSortChange}\n\n            onFileChange={handleFileChange}\n            onClearFileList={handleClearFileList}\n            onUploadDone={handleUploadDone}\n            />\n        </div>\n      <div className=\"k-filemanager-content-container\">\n        <Splitter\n          panes={panes} \n          onChange={handleSplitterChange} \n          >\n          <FolderTree \n            data={convertToTreeData(stateData, selectedTreeItem)}\n            selected={selectedTreeItem}\n            selectedItem={selectedTreeItem}\n            onItemClick={handleTreeItemClick}\n            onContextMenu={handleContextMenuView}\n            />\n          <div className=\"k-filemanager-content\">\n            <BreadcrumbComponent \n              data={convertToBreadcrumbData(stateData, selectedTreeItem)}\n              onBreadcrumbSelect={handleBreadcrumbSelection}\n              />\n            {contentView === 'grid'\n              ? <GridView\n                  data={selectedTreeItem && selectedTreeItem.items\n                    ? process((selectedTreeItem.items.slice().map(item => ({\n                      ...item,\n                      [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                      })))\n                      , stateContentData)\n                    : !selectedTreeItem\n                      ? process((stateData.slice().map(item => ({\n                        ...item,\n                        [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                        })))\n                        , stateContentData)\n                      : null\n                  }\n                  sort={stateContentData.sort}\n                  dataItemKey={DATA_ITEM_KEY}\n                  onSelectionChange={handleSelectionChange}\n                  onSortChange={handleSortChange}\n                  onDoubleClick={handleGridDoubleClick}\n                  onContextMenu={handleContextMenuView}\n                  />\n              : <ListView\n                  data={selectedTreeItem && selectedTreeItem.items\n                    ? process((selectedTreeItem.items.slice().map(item => ({\n                      ...item,\n                      [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                      })))\n                      , stateContentData)\n                    : !selectedTreeItem\n                      ? process((stateData.slice().map(item => ({\n                        ...item,\n                        [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                        })))\n                        , stateContentData)\n                      : null \n                  }\n                  onSelectionChange={handleSelectionChange}\n                  onItemClick={handleListItemClick}\n                  onDoubleClick={handleGridDoubleClick}\n                  onContextMenu={handleContextMenuView}\n                />\n            }\n            { contextMenuView ? <ContextMenu offset={menuOffSet} onContextMenuCLick={handleContextMenuClick}/> : '' }\n            { editDialogView \n              ? <EditDialog \n                  editValue={Object.keys(selectedGridItem).length ? selectedGridItem : selectedTreeItem}\n                  onDialogClose={handleDialogClose}\n                  onDialogClick={handleDialogClick}\n                  /> \n              : '' }\n            { deleteDialogView ? <DeleteDialog onDialogClose={handleDialogClose} onDialogClick={handleDialogClick} /> : '' }\n          </div>\n          <FileInformation data={detailsData} />\n        </Splitter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}