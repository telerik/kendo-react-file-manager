{"version":3,"sources":["helpers/helperMethods.tsx","components/FileManagerToolbar.tsx","components/GridView.tsx","components/ListView.tsx","components/FileInformation.tsx","components/FolderTree.tsx","components/Breadcrumb.tsx","components/Dialog.tsx","data/data.ts","components/ContextMenu.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["convertExtensionToIcon","item","split","icon","type","convertDateFormat","date","intl","formatDate","convertToTreeData","data","selectedItem","treeData","forEach","name","includes","push","expanded","selected","dateCreated","Date","undefined","items","length","clearData","gridData","searchTreeItem","curItem","Array","isArray","i","deepCopy","JSON","parse","stringify","FOLDER_NAME_COUNTER","addFolder","updatedData","clone","folderName","size","convertToBreadcrumbData","path","id","iconClass","newPath","toggleViewBtnGroup","btnGroupState","view","listView","gridView","toggleSortBtnGroup","curState","sortDesc","sortAsc","formatBytes","bytes","decimals","k","dm","sizes","Math","floor","log","parseFloat","pow","toFixed","editDataItem","newName","dateModified","array","removeDataItem","FileManagerToolbar","props","React","dialogVisibility","setDialogVisibility","viewBtnGroup","setViewBtnGroup","handleDialogVisibility","event","handleFileChange","onFileChange","files","newState","className","onClick","onNewFolderClick","title","onClose","contentStyle","width","batch","multiple","withCredentials","onAdd","onRemove","onProgress","onStatusChange","saveUrl","removeUrl","layout","onClearFileList","primary","onUploadDone","togglable","sort","dir","newBtnGroupState","onSortChange","direction","sortValue","text","splitItems","onItemClick","onViewChange","viewValue","defaultChecked","onChange","onSwitchChange","placeholder","onSearchChange","DateCreatedCell","useInternationalization","field","dataItem","navigationAttributes","useTableKeyboardNavigation","GRID_COL_INDEX_ATTRIBUTE","columnIndex","SizeCell","GridView","handleContextMenu","onContextMenu","rowRender","trElement","trProps","preventDefault","children","style","height","navigatable","sortable","allowUnsort","selectedField","selectable","enabled","drag","mode","dataItemKey","onSelectionChange","onKeyDown","pressedKey","onRowDoubleClick","onDoubleClick","cell","ListView","selectedItems","setSelectedItems","handleDragEnd","map","iconObject","classNames","newItem","handleClick","onDragEnter","find","element","handleDrag","onDragEnd","handleDoubleClick","FileInformation","MultipleSelectionRendering","FileSelectionRendering","NoDataRendering","border","FolderTree","handleEdit","onItemEdit","handleBlur","onItemBlur","tree","edit","autoFocus","value","e","onBlur","textField","expandIcons","onExpandChange","BreadcrumbComponent","onItemSelect","onBreadcrumbSelect","EditDialog","editValue","inputValue","setInputValue","handleDialogClick","onDialogClick","target","onDialogClose","margin","textAlign","maxLength","DeleteDialog","serverData","ContextMenu","show","offset","vertical","display","onSelect","onContextMenuCLick","splitterPanes","min","collapsible","initialSort","DATA_ITEM_KEY","SELECTED_FIELD","idGetter","getter","App","newData","itemDate","formatData","stateData","setStateData","panes","setPanes","selectedGridItem","setSelectedGridItem","selectedTreeItem","setSelectedTreeItem","detailsData","setDetailsData","setFiles","contentView","setContentView","contextMenuView","setContextMenuView","left","top","menuOffSet","setMenuOffSet","editDialogView","setEditDialogView","deleteDialogView","setDeleteDialogView","filter","logic","filters","operator","stateContentData","setStateContentData","updateFileDetailsData","selection","numberOfSelectedItems","Object","keys","curSelectedItem","handleSelectionChange","selectedState","getSelectedStateFromKeyDown","getSelectedState","handleSortChange","newSortedData","handleGridDoubleClick","itemType","newSelectedItem","newTreeItem","pop","handleContextMenuView","clientX","clientY","handleDialogClose","document","addEventListener","newPanes","slice","file","extension","addDataItem","nativeEvent","keyCode","process","itemId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8f843fe.chunk.js","sourcesContent":["import { UploadFileInfo } from '@progress/kendo-react-upload';\nimport { clone } from '@progress/kendo-react-common';\nimport { BreadcrumbDataModel, DataModel, GridViewBtnGroup, SortingBtnGroup } from '../interfaces/FileManagerModels';\n\n// .xlsx && .xls  => excel\n// .jpg && .png   => picture\n// .txt && .doc/x => text\n// no extension   => folder\nexport const convertExtensionToIcon = (item: string | null | undefined) => {\n  if (!item) { return null; }\n  const extension: string = item.split('.')[1];\n\n  switch (extension) {\n    case 'xlsx': case 'xls':\n      return {\n        icon: 'k-i-file-data',\n        type: 'Data'\n      };\n    case 'jpg': case 'png': case '.JPG':\n      return {\n        icon: 'k-i-file-image',\n        type: 'Image'\n      };\n    case 'txt': case 'doc': case 'docx':\n      return {\n        icon: 'k-i-file-txt',\n        type: 'Text'\n      };\n    default:\n      return {\n        icon: 'k-i-folder',\n        type: 'Folder'\n      };\n  };\n};\n\nexport const convertDateFormat = (date: Date | null, intl) => {\n  return date ? intl.formatDate(date, 'd.MM.y  h:mm:ss aa  EEEE') : date;\n};\n\nexport const formatData = (data: DataModel[], intl) => {\n  const newData = [] as DataModel[];\n\n  if (data) {\n    data.forEach(item => {\n      const itemDate: Date = convertDateFormat(item.dateCreated || null, intl);\n\n      newData.push({\n        name: item.name,\n        dateCreated: itemDate,\n        size: item.size,\n        items: item.items,\n        icon: item.icon\n      })\n    });\n  }\n  return newData;\n};\n\nexport const convertToTreeData = (data: DataModel[], selectedItem: DataModel | null = null) => {\n  const treeData = [] as DataModel[];\n\n  data.forEach(item => {\n    if (item.name && !item.name.includes('.')) {\n      treeData.push({\n        name: item.name,\n        expanded: item.expanded,\n        selected: selectedItem ? selectedItem.name === item.name : false,\n        dateCreated: new Date(),\n        icon: convertExtensionToIcon(undefined),\n        items: item.items && item.items.length ? convertToTreeData(item.items, selectedItem) : []\n      })\n    }\n  })\n  return treeData;\n};\n\nexport const clearData = (data: DataModel[], selectedItem: DataModel | null = null) => {\n  const gridData = [] as DataModel[];\n\n  data.forEach(item => {\n    if (item.name) {\n      gridData.push({\n        ...item,\n        items: item.items && item.items.length ? clearData(item.items, selectedItem) : []\n      })\n    }\n  })\n  return gridData;\n};\n\nexport const searchTreeItem = (data: DataModel, curItem: DataModel | null) => {\n  if (!curItem) { return data; }\n\n  if (Array.isArray(data)) {\n    for (let i = 0; i < data.length; i++) {\n      let item: DataModel = searchTreeItem(data[i], curItem);\n      if (item) {\n        return item;\n      }\n    }\n  } else if (typeof data === 'object') {\n    if (data.name !== undefined && data.name === curItem.name) {\n      return data;\n    }\n  }\n  if (data.items !== undefined && data.items.length > 0) {\n    return searchTreeItem(data.items, curItem);\n  } else {\n    return null;\n  }\n};\n\nconst deepCopy = (data: DataModel[]) => JSON.parse(JSON.stringify(data));\n\nexport const addDataItem = (data: DataModel | DataModel[], curItem: DataModel | null, files: UploadFileInfo[], intl) => {\n  const updatedData: DataModel | DataModel[] = Array.isArray(data) ? deepCopy(data) : clone(data);\n  const selectedItem = curItem ? clone(curItem) : {};\n\n  if (!curItem && Array.isArray(updatedData)) {\n    files.forEach(file => {\n      updatedData.push({\n        name: file.name, \n        dateCreated: convertDateFormat(new Date(), intl),\n        size: file.size,\n        icon: convertExtensionToIcon(file.extension)\n      });\n    });\n    return { updatedData, selectedItem };\n  }\n\n  if (Array.isArray(updatedData)) {\n    for (let i = 0; i < updatedData.length; i++) {\n      let item: DataModel = searchTreeItem(updatedData[i], selectedItem);\n      if (item) {\n        files.forEach(file => {\n          if (!item.items) {\n            item.items = [];\n          }\n\n          item.items.push({\n            name: file.name, \n            dateCreated: convertDateFormat(new Date(), intl),\n            size: file.size,\n            icon: convertExtensionToIcon(file.extension)\n          });\n          selectedItem.items = item.items;\n        });\n      }\n    }\n    return { updatedData, selectedItem };\n  } else if (typeof updatedData === 'object') {\n    if (updatedData.name !== undefined && updatedData.name === selectedItem.name) {\n      return { updatedData, selectedItem };\n    }\n  }\n  if (updatedData.items !== undefined && updatedData.items.length > 0) {\n    return searchTreeItem(updatedData.items, selectedItem);\n  } else {\n    return null;\n  }\n};\n\nlet FOLDER_NAME_COUNTER = 0;\nexport const addFolder = (data: DataModel, curItem: DataModel | null, intl) => {\n  const updatedData: DataModel | DataModel[] = Array.isArray(data) ? deepCopy(data) : clone(data);\n  const selectedItem = curItem ? clone(curItem) : {};\n\n  if (!curItem && Array.isArray(updatedData)) {\n    const folderName = FOLDER_NAME_COUNTER ? `New Folder (${FOLDER_NAME_COUNTER})` : 'New Folder';\n    FOLDER_NAME_COUNTER++;\n    updatedData.push({\n      name: folderName, \n      dateCreated: convertDateFormat(new Date(), intl),\n      size: 124,\n      icon: convertExtensionToIcon(undefined)\n    });\n    return updatedData;\n  }\n\n  if (Array.isArray(updatedData)) {\n    for (let i = 0; i < updatedData.length; i++) {\n      let item: DataModel = searchTreeItem(updatedData[i], selectedItem);\n      if (item) {\n        const folderName = FOLDER_NAME_COUNTER ? `New Folder (${FOLDER_NAME_COUNTER})` : 'New Folder';\n        FOLDER_NAME_COUNTER++;\n        if (!item.items) {\n          item.items = [];\n        }\n\n        item.items.push({\n          name: folderName,\n          dateCreated: convertDateFormat(new Date(), intl),\n          size: 124,\n          icon: convertExtensionToIcon(undefined)\n        });\n\n        return updatedData;\n      }\n    }\n  } else if (typeof data === 'object') {\n    if (data.name !== undefined && data.name === selectedItem.name) {\n      return data;\n    }\n  }\n  if (data.items !== undefined && data.items.length > 0) {\n    return searchTreeItem(data.items, selectedItem);\n  } else {\n    return null;\n  }\n};\n\nexport const searchTreePath = (data: DataModel, curItem: DataModel | null, path?: BreadcrumbDataModel) => {\n  if (!curItem) { return; }\n\n  if (Array.isArray(data)) {\n    for (let i = 0; i < data.length; i++) {\n      let item: DataModel = searchTreeItem(data[i], curItem, );\n      if (item) {\n        return item;\n      }\n    }\n  } else if (typeof data === 'object') {\n    if (data.name !== undefined && data.name === curItem.name) {\n      return data;\n    }\n  }\n  if (data.items !== undefined && data.items.length > 0) {\n    return searchTreeItem(data.items, curItem);\n  } else {\n    return null;\n  }\n};\n\nexport const convertToBreadcrumbData = (data, selectedItem: DataModel | null, path: BreadcrumbDataModel[] = [{\n    id: 'Home',\n    name: 'Home',\n    iconClass: 'k-i-home'\n  }]) => {\n  if (!selectedItem) {\n    return path;\n  }\n \n  for (let i = 0; i < data.length; i++) {\n    if (data[i].name === selectedItem.name) {\n      path.push({\n        id: data[i].name,\n        name: data[i].name,\n        items: data[i].items\n      });\n      \n      return path;\n    }\n  }\n\n  for (let i = 0; i < data.length; i++) {\n      if (data[i].items?.length) {\n        path.push({\n          id: data[i].name,\n          name: data[i].name,\n          items: data[i].items\n        });\n\n        const newPath = convertToBreadcrumbData(data[i].items, selectedItem, path);\n        return newPath;\n      }\n  };\n};\n\nexport const toggleViewBtnGroup = (btnGroupState: GridViewBtnGroup, view: string) => {\n  if (!btnGroupState.listView && view !== 'grid') {\n    return { gridView: false, listView: true };\n  }\n  if (!btnGroupState.gridView && view !== 'list') {\n    return { gridView: true, listView: false };\n  }\n  return btnGroupState;\n};\n\nexport const toggleSortBtnGroup = (btnGroupState: SortingBtnGroup, curState: string) => {\n  if (!btnGroupState.sortDesc && curState !== 'asc') {\n    return { sortAsc: false, sortDesc: true };\n  }\n  if (!btnGroupState.sortAsc && curState !== 'desc') {\n    return { sortAsc: true, sortDesc: false };\n  }\n  return btnGroupState;\n};\n\nexport const formatBytes = (bytes: number, decimals: number = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k: number = 1024;\n  const dm: number = decimals < 0 ? 0 : decimals;\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nexport const editDataItem = (data, selectedItem: DataModel, newName: string) => {\n  if (!data) { return; }\n\n  for (let i = 0; i < data.length; i++) {\n    for (let item = 0; item < data.length; item++) {\n      if (data[item].name === selectedItem.name) {\n        data[item].name = newName;\n        data[item].dateModified = new Date();\n        return data;\n      }\n\n      if (data[item].items) {\n        const array = editDataItem(data[item].items, selectedItem, newName);\n        if (array) {\n          return array;\n        }\n      }\n    }\n  }\n};\n\nexport const removeDataItem = (data, selectedItem: DataModel) => {\n  for (let i = 0; i < data.length; i++) {\n    for (let item = 0; item < data.length; item++) {\n      if (data[item].name === selectedItem.name) {\n        data[item] = {};\n        return data;\n      }\n\n      if (data[item].items) {\n        const array = removeDataItem(data[item].items, selectedItem);\n        if (array) {\n          return array;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport {\n    Toolbar,\n    Button,\n    ButtonGroup,\n    SplitButton,\n    SplitButtonItemClickEvent\n} from '@progress/kendo-react-buttons';\nimport { Switch, Input, InputChangeEvent, SwitchChangeEvent } from \"@progress/kendo-react-inputs\";\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\nimport { Upload } from '@progress/kendo-react-upload';\nimport { BaseEvent } from '@progress/kendo-react-common';\nimport { toggleViewBtnGroup, toggleSortBtnGroup } from '../helpers/helperMethods';\nimport { GridViewBtnGroup, UploadAddEvent } from '../interfaces/FileManagerModels';\n\nexport const FileManagerToolbar = (props) => {\n    const [dialogVisibility, setDialogVisibility] = React.useState<boolean>(false);\n    const [viewBtnGroup, setViewBtnGroup] = React.useState<GridViewBtnGroup>({ gridView: true, listView: false });\n\n    const handleSearchChange = (event: InputChangeEvent) => {\n        props.onSearchChange(event);\n    };\n\n    const handleSwitchChange = (event: SwitchChangeEvent) => {\n        props.onSwitchChange(event);\n    };\n\n    const handleGridViewChange = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (event) {\n            const newBtnGroupState = toggleViewBtnGroup(viewBtnGroup, 'grid');\n            setViewBtnGroup(newBtnGroupState);\n\n            props.onViewChange({\n                viewValue: newBtnGroupState,\n                event: event\n            });\n        }\n    };\n    \n    const handleAscBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (event) {\n            const newBtnGroupState = toggleSortBtnGroup(props.sort[0].dir, 'asc');\n            props.onSortChange({\n                direction: 'asc',\n                sortValue: newBtnGroupState,\n                event: event\n            });\n        } \n    };\n\n    const handleDescSortBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        const newBtnGroupState = toggleSortBtnGroup(props.sort[0].dir, 'desc');\n        props.onSortChange({\n            direction: 'desc',\n            sortValue: newBtnGroupState,\n            event: event\n        });\n    };\n\n    const handleListViewChange = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (event) {\n            const newBtnGroupState = toggleViewBtnGroup(viewBtnGroup, 'list');\n            setViewBtnGroup(newBtnGroupState);\n\n            props.onViewChange({\n                viewValue: newBtnGroupState,\n                event: event\n            });\n        }\n    };\n\n    const handleItemClick = (event: SplitButtonItemClickEvent) => {\n        props.onSortChange(event);\n    };\n\n    const handleNewFolderClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        props.onNewFolderClick(event);\n    }\n\n    const handleDialogVisibility = (event: BaseEvent<Dialog> | React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setDialogVisibility(!dialogVisibility);\n    };\n\n    const handleFileChange = (event: UploadAddEvent) => {\n        props.onFileChange({\n            files: event.newState,\n            event: event\n        });\n    };\n\n    const handleUploadClearList = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        props.onClearFileList(event); \n    };\n\n    const handleUploadDone = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setDialogVisibility(!dialogVisibility);\n        props.onUploadDone(event);\n    };\n\n    return (\n        <Toolbar className=\"k-filemanager-toolbar\">\n            <Button onClick={handleNewFolderClick}>New Folder</Button>\n            <Button onClick={handleDialogVisibility}>Upload</Button>\n            { dialogVisibility &&\n                <Dialog  \n                    title={'Upload Files'}\n                    className={'k-filemanager-upload-dialog'}\n                    onClose={handleDialogVisibility}\n                    contentStyle={{ width: '530px' }}\n                    >\n                    <Upload\n                        batch={false}\n                        multiple={true}\n                        files={props.files}\n                        withCredentials={false}\n                        onAdd={handleFileChange}\n                        onRemove={handleFileChange}\n                        onProgress={handleFileChange}\n                        onStatusChange={handleFileChange}\n                        saveUrl={'https://demos.telerik.com/kendo-ui/service-v4/upload/save'}\n                        removeUrl={'https://demos.telerik.com/kendo-ui/service-v4/upload/remove'}\n                        />\n                    <DialogActionsBar layout={'end'}>\n                        <Button onClick={handleUploadClearList} > Clear List</Button>\n                        <Button primary={true} onClick={handleUploadDone}> Done </Button>\n                    </DialogActionsBar>\n                </Dialog >\n            }\n\n            <ButtonGroup>\n                <Button\n                    className=\"k-toggle-button k-button-icon k-group-start\"\n                    togglable={true}\n                    selected={props.sort[0].dir === 'asc'}\n                    onClick={handleAscBtnClick}\n                    >\n                    <span className=\"k-icon k-i-sort-asc-sm\"></span>\n                </Button>\n                <Button\n                    className=\"k-toggle-button k-button k-button-icon k-group-end\"\n                    togglable={true}\n                    selected={props.sort[0].dir === 'desc'}\n                    onClick={handleDescSortBtnClick}\n                    >\n                    <span className=\"k-icon k-i-sort-desc-sm\"></span>\n                </Button>\n            </ButtonGroup>\n            <SplitButton \n                text={'Sort By'}\n                items={props.splitItems}\n                onItemClick={handleItemClick}\n                >\n            </SplitButton>\n            <ButtonGroup>\n                <Button \n                    className={\"k-toggle-button k-button-icon k-group-start\"}\n                    togglable={true}\n                    selected={viewBtnGroup.gridView}\n                    onClick={handleGridViewChange}\n                    >\n                    <span className=\"k-icon k-i-grid-layout\"></span>\n                </Button>\n                <Button \n                    className={\"k-toggle-button k-button-icon k-group-end\"}\n                    togglable={true}\n                    selected={viewBtnGroup.listView}\n                    onClick={handleListViewChange}\n                    >\n                    <span className=\"k-icon k-i-grid\"></span>\n                </Button>\n            </ButtonGroup>\n            <div className=\"k-spacer\">&nbsp;</div>\n            <div className=\"k-filemanager-details-toggle\">\n                <label>View Details</label>\n                <Switch defaultChecked={true} onChange={handleSwitchChange} >\n                    <Input type=\"checkbox\"/>\n                    <span className=\"k-switch-container\">\n                        <span className=\"k-switch-label-on\">On</span>\n                        <span className=\"k-switch-label-off\">Off</span>\n                        <span className=\"k-switch-handle\"></span>\n                    </span>\n                </Switch>\n            </div>\n            <div className=\"k-filemanager-search-tool k-textbox k-toolbar-last-visible\" >\n                <Input className=\"k-input\" placeholder=\"Search\" onChange={handleSearchChange}/>\n                <span className=\"k-input-icon\">\n                    <span className=\"k-icon k-i-search\"></span>\n                </span>\n            </div>\n        </Toolbar>\n    );\n}\n","import * as React from 'react';\nimport { \n  Grid,\n  GridCellProps,\n  GridColumn as Column,\n  GridKeyDownEvent,\n  GridRowDoubleClickEvent,\n  GridSelectionChangeEvent,\n  GridSortChangeEvent,\n  GRID_COL_INDEX_ATTRIBUTE\n} from '@progress/kendo-react-grid';\nimport { useTableKeyboardNavigation } from \"@progress/kendo-react-data-tools\";\nimport { clearData, convertDateFormat, formatBytes } from '../helpers/helperMethods';\nimport { useInternationalization } from '@progress/kendo-react-intl';\n\nconst DateCreatedCell  = (props: GridCellProps) => {\n  const intl = useInternationalization();\n\n  const field: string = props.field || \"\";\n  const date: Date = props.dataItem[field];\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      {date === null ? \"\" : convertDateFormat(date, intl)}\n    </td>\n  );\n};\n\nconst SizeCell = (props: GridCellProps) => {\n  const field: string = props.field || \"\";\n  const size: number = props.dataItem[field];\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      {size === null ? \"\" : formatBytes(size)}\n    </td>\n  );\n};\n\nexport const GridView = (props) => {\n  const RowRender = (trElement, dataItem) => {\n    const trProps = {\n      onContextMenu: (event) => {\n        event.preventDefault()\n        handleContextMenu(event, dataItem);\n      }\n    }\n    return React.cloneElement(trElement, { ...trProps }, trElement.props.children);\n  };\n  \n  const handleOnSortChange = (event: GridSortChangeEvent) => {\n    props.onSortChange({\n      sort: event.sort,\n      event: event\n    });\n  };\n\n  const handleOnSelectionChange = (event: GridSelectionChangeEvent) => {\n    props.onSelectionChange(event);\n  };\n\n  const handleOnKeyDown = (event: GridKeyDownEvent) => {\n    props.onSelectionChange({\n      pressedKey: true,\n      event: event\n    });\n  };\n\n  const handleDoubleClick = (event: GridRowDoubleClickEvent) => {\n    props.onDoubleClick(event);\n  };\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, dataItem) => {\n    props.onContextMenu({\n      dataItem: dataItem.dataItem,\n      event: event\n    });\n  };\n\n  return (\n    <Grid\n      data={props.data ? clearData(props.data.data) : props.data}\n      rowRender={RowRender}\n      className={\"k-filemanager-grid k-grid-display-block k-editable\"}\n      style={{ height: '100%' }}\n      navigatable={true}\n      sortable={{\n        allowUnsort: false\n      }}\n      sort={props.sort}\n      selectedField={'selected'}\n      selectable={{ enabled: true, drag: true, mode: 'multiple' }}\n      dataItemKey={props.dataItemKey}\n      onSelectionChange={handleOnSelectionChange}\n      onSortChange={handleOnSortChange}\n      onKeyDown={handleOnKeyDown}\n      onRowDoubleClick={handleDoubleClick}\n      >\n      <Column field=\"name\" title=\"Name\" />\n      <Column field=\"dateCreated\" title=\"Date Created\" cell={DateCreatedCell} />\n      <Column field=\"size\" title=\"Size\" cell={SizeCell} />\n    </Grid>\n  );\n}\n","import * as React from 'react';\n\nimport { classNames } from '@progress/kendo-react-common';\nimport { clearData, convertExtensionToIcon } from '../helpers/helperMethods';\nimport { DataModel, IconType } from './../interfaces/FileManagerModels';\n\nlet items: DataModel[] = [];\n\nexport const ListView = (props) => {\n    const [selectedItems, setSelectedItems] = React.useState<DataModel[] | null>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n        const newItem = {};\n        if (item.name) {\n            newItem[item.name] = true;\n            props.onItemClick({ dataItem: newItem, event });\n        }\n    };\n\n    const handleDrag = (event, item: DataModel) => {\n        if (!item.name) { return; }\n\n        const existingIndex = items.find(element => element.name === item.name);\n        if (!existingIndex) {\n            items[item.name] = true;\n            setSelectedItems(items);\n        }\n    };\n\n    const handleDragEnd = (event: React.DragEvent<HTMLDivElement>) => {\n        props.onItemClick({ dataItem: selectedItems, event });\n    };\n\n    const handleDoubleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n        props.onDoubleClick({ dataItem: item, event });\n    };\n    \n    const handleContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n        event.preventDefault();\n        props.onContextMenu({ dataItem: item, event });\n    };\n\n    return (\n        <div className=\"k-listview k-selectable k-filemanager-listview\">\n          <div className=\"k-listview-content k-d-flex k-flex-row k-flex-wrap\">\n              { props.data \n                ? clearData(props.data.data).map((item: any) => {\n                    const iconObject: IconType | null = convertExtensionToIcon(item.name);\n                    return (\n                    <>\n                        <div className={classNames(\"k-listview-item\", { \"k-state-selected\": item.selected })}\n                            onClick={event => handleClick(event, item)}\n                            onDragEnter={event => handleDrag(event, item)}\n                            onDragEnd={handleDragEnd}\n                            onDoubleClick={event => handleDoubleClick(event, item)}\n                            onContextMenu={event => handleContextMenu(event, item)}\n                            >\n                        <span className=\"k-file-preview\">\n                            <span className={classNames(\"k-file-icon k-icon\", iconObject ? iconObject.icon : '')} />\n                        </span>\n                        <span className=\"k-file-name\">{item.name}</span>\n                        </div>\n                    </>\n                    )\n                }) \n            : '' }\n            </div>\n        </div>\n    );\n}\n","import { useInternationalization } from '@progress/kendo-react-intl';\nimport { convertDateFormat, convertExtensionToIcon, formatBytes } from '../helpers/helperMethods';\nimport { classNames } from '@progress/kendo-react-common';\nimport { DataModel, IconType } from '../interfaces/FileManagerModels';\n\nexport const FileInformation = (props) => {\n    return (\n        props.data\n            ? typeof props.data === 'number' ? MultipleSelectionRendering(props.data) : FileSelectionRendering(props.data)\n            : NoDataRendering());\n}\n\nconst NoDataRendering = () => {\n    return (\n        <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n            <div className=\"k-file-info\">\n                <span className=\"k-file-preview\"><span className=\"k-file-icon k-icon k-i-none\"></span></span>\n                <span className=\"k-file-name k-no-file-selected\">No File Selected</span>\n            </div>\n        </div>\n    )\n}\n\nconst FileSelectionRendering = (data: DataModel) => {\n    const intl = useInternationalization();\n    const dateCreated: Date = convertDateFormat(data.dateCreated ? data.dateCreated : null, intl);\n    const dateModified: Date = convertDateFormat(data.dateModified ? data.dateModified : null, intl);\n    const iconObject: IconType | null = convertExtensionToIcon(data.name ? data.name : null);\n    return (\n        <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n            <div className=\"k-file-info\">\n                <span className=\"k-file-preview\">\n                    <span className={classNames(\"k-file-icon k-icon\", iconObject?.icon ? iconObject.icon : '')}></span>\n                </span>\n                <span className=\"k-file-name k-single-file-selected\">{data.name? data.name : ''}</span>\n                <dl className=\"k-file-meta\">\n                    <dt className=\"k-file-meta-label\">Type:  </dt>\n                    <dd className= {\"k-file-meta-value k-file-type\"}> {iconObject?.type ? iconObject.type : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                    <dt className=\"k-file-meta-label\">Size:  </dt>\n                    <dd className=\"k-file-meta-value k-file-size\"> {data.size ? formatBytes(data.size) : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                    <dt className=\"k-file-meta-label\">Date Created:  </dt>\n                    <dd className=\"k-file-meta-value k-file-created\"> {dateCreated ? dateCreated : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                    <dt className=\"k-file-meta-label\">Date Modified:  </dt>\n                    <dd className=\"k-file-meta-value k-file-modified\"> {dateModified ? dateModified : ''}</dd>\n                    <dd className=\"k-line-break\"></dd>\n                </dl>\n            </div>\n        </div>\n    );\n}\n\nconst MultipleSelectionRendering = (length: number) => {\n    return (\n        <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n            <div className=\"k-file-info\">\n                <span className=\"k-file-preview\" style={{ width: '100%', border: 0 }}>\n                    <span className=\"k-file-icon k-icon k-i-file\"></span></span>\n                <span className=\"k-file-name k-multiple-files-selected\">{length} items</span>\n            </div>\n        </div>\n    );\n}\n","import { ItemRenderProps, TreeView, TreeViewExpandChangeEvent, TreeViewItemClickEvent } from '@progress/kendo-react-treeview'\nimport { DataModel } from '../interfaces/FileManagerModels';\n\nexport const FolderTree = (props) => {\n    const handleEdit = (event: React.ChangeEvent<HTMLInputElement>, item: DataModel) => {\n        props.onItemEdit({\n            item: item,\n            event: event\n        });\n    };\n\n    const handleBlur = (event: React.ChangeEvent<HTMLInputElement>, item: DataModel) => {\n        props.onItemBlur({\n            item: item,\n            event: event\n        });\n    };\n\n    const handleExpandChange = (event: TreeViewExpandChangeEvent) => {\n        event.item.expanded = !event.item.expanded;\n    };\n\n    const handleItemClick = (event: TreeViewItemClickEvent) => {\n        if (event.item) {\n            props.onItemClick({\n                item: event.item,\n                event: event\n            });\n        }\n    };\n\n    const handleContextMenu = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>, item: DataModel) => {\n        event.preventDefault();\n        props.onContextMenu({\n            tree: true,\n            dataItem: item,\n            event: event\n        });\n    };\n\n    const TreeViewItem = (props: ItemRenderProps) => {\n        if (props.item.edit) {\n            return (\n                <span>\n                <input className='k-textbox'\n                    autoFocus\n                    value={props.item.text}\n                    onChange={(e) => handleEdit(e, props.item)}\n                    onBlur={(e) => handleBlur(e, props.item)} />\n                </span>\n            );\n        }\n        return (\n            <span onContextMenu={(event) => handleContextMenu(event, props.item)}>{props.item.name}</span>\n        );\n    };\n\n    return (\n        <TreeView\n            data={props.data}\n            item={TreeViewItem}\n            className=\"k-filemanager-treeview\"\n            textField=\"name\"\n            expandIcons={true}\n            onExpandChange={handleExpandChange}\n            onItemClick={handleItemClick}\n        /> \n    );\n}\n","import { Breadcrumb, BreadcrumbLinkMouseEvent, BreadcrumbLinkKeyDownEvent } from '@progress/kendo-react-layout';\n\nexport const BreadcrumbComponent = (props) => {\n    const handleItemSelect = (event: BreadcrumbLinkMouseEvent) => {\n        props.onBreadcrumbSelect(event);\n    };\n\n    const handleKeyDown = (event: BreadcrumbLinkKeyDownEvent) => {\n      props.onBreadcrumbSelect(event);\n    };\n\n    return (\n        <Breadcrumb \n          data={props.data ? props.data : ''}\n          textField={'name'}\n          onItemSelect={handleItemSelect}\n          onKeyDown={handleKeyDown}\n          />\n    );\n};\n","import { Dialog as DialogComponent, DialogActionsBar, DialogCloseEvent } from '@progress/kendo-react-dialogs';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\nimport * as React from 'react';\n\nexport const EditDialog = (props) => {\n    const [inputValue, setInputValue] = React.useState<string>(props.editValue.name);\n    const handleDialogClick = (event) => {\n        props.onDialogClick({\n            event,\n            value: inputValue,\n            type: event.target.value\n        });\n    };\n\n    const handleDialogClose = (event: DialogCloseEvent) => {\n        props.onDialogClose(event);\n    };\n\n    const handleInputChange = (event: InputChangeEvent) => {\n        setInputValue(event.value);\n    };\n\n    return (\n        <DialogComponent title={'Please confirm'} onClose={handleDialogClose}>\n            <p style={{ width: '350px', margin: '25px', textAlign: 'center' }}>Enter new name for the file.</p>\n            <Input\n                maxLength={40}\n                value={inputValue}\n                style={{ width: '350px', margin: '25px', textAlign: 'center' }}\n                className={'k-textbox'}\n                onChange={handleInputChange}\n                />\n          <DialogActionsBar>\n            <button value={'rename'} className='k-button k-state-selected' onClick={handleDialogClick}>Rename</button>\n            <button value={'cancel'} className='k-button' onClick={handleDialogClick}>Cancel</button>\n          </DialogActionsBar>\n        </DialogComponent>\n    );\n};\n\nexport const DeleteDialog = (props) => {\n    const handleDialogClick = (event) => {\n        props.onDialogClick({\n            event,\n            type: event.target.value\n        });\n    };\n\n    const handleDialogClose = (event) => {\n        props.onDialogClose(event);\n    };\n\n    return (\n        <DialogComponent title={'Please confirm'} onClose={handleDialogClose}>\n          <p style={{ width: '350px', margin: '25px', textAlign: 'center' }}>Are you sure you want to delete the selected file? You cannot undo this action.</p>\n          <DialogActionsBar>\n            <button value={'delete'} className='k-button k-state-selected' onClick={handleDialogClick}>Delete</button>\n            <button value={'cancel'} className='k-button' onClick={handleDialogClick}>Cancel</button>\n          </DialogActionsBar>\n        </DialogComponent>\n    );\n};\n","import { DataModel } from \"../interfaces/FileManagerModels\";\n\nexport const serverData: DataModel[] = [\n  {\n    name: \"Pictures.jpg\",\n    size: 0,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: []\n  },{\n    name: \"Documents\",\n    size: 100000,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        name: \"Image.jpg\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        name: \"shared\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            name: \"wave.jpg\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          },\n          {\n            name: \"wave\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        name: \"Anime.jpg\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  }, {\n    name: \"Pictures\",\n    size: 0,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: []\n  }, {\n    name: \"Music\",\n    size: 0,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: []\n  }\n];\n","\nimport { Menu, MenuItem, MenuSelectEvent } from '@progress/kendo-react-layout';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { ContextMenuProps } from '../interfaces/FileManagerModels';\n\nexport const ContextMenu = (props: ContextMenuProps) => {\n  const handleSelection = (event:  MenuSelectEvent) => {\n    props.onContextMenuCLick(event);\n  };\n\n  return (\n    <Popup show={true} offset={props.offset}>\n        <Menu vertical={true} style={{ display: 'inline-block' }} onSelect={handleSelection}>\n            <MenuItem text=\"Rename\" icon={'k-icon k-i-edit'} />\n            <MenuItem text=\"Delete\" icon={'k-icon k-i-delete'} />\n        </Menu>\n    </Popup>\n  );\n}\n","import * as React from 'react';\n\nimport { Splitter, SplitterOnChangeEvent, BreadcrumbLinkMouseEvent } from '@progress/kendo-react-layout';\nimport { useInternationalization } from '@progress/kendo-react-intl';\nimport { process, SortDescriptor, State } from '@progress/kendo-data-query';\nimport { clone, getter } from '@progress/kendo-react-common';\nimport { getSelectedState, getSelectedStateFromKeyDown, GridRowDoubleClickEvent } from '@progress/kendo-react-grid';\nimport { UploadFileInfo } from '@progress/kendo-react-upload';\nimport { TreeViewItemClickEvent } from '@progress/kendo-react-treeview';\nimport { InputChangeEvent } from '@progress/kendo-react-inputs';\nimport { Offset } from '@progress/kendo-react-popup';\n\nimport { FileManagerToolbar } from './components/FileManagerToolbar';\nimport { GridView } from './components/GridView';\nimport { ListView } from './components/ListView';\nimport { FileInformation } from './components/FileInformation';\nimport { FolderTree } from './components/FolderTree';\nimport { BreadcrumbComponent } from './components/Breadcrumb';\nimport { DeleteDialog, EditDialog } from './components/Dialog';\n\nimport { serverData } from './data/data';\nimport { \n  DataModel,\n  PanesModel,\n  SplitBtnItems,\n  SelectedItemType,\n  SelectionChangeEvent,\n  UploadAddEvent,\n  ViewChangeEvent,\n  SortChangeEvent,\n  AppSwitchChangeEvent,\n  ContextMenuEvent\n} from './interfaces/FileManagerModels';\nimport {\n  formatData,\n  convertToTreeData,\n  searchTreeItem,\n  addDataItem,\n  addFolder,\n  convertExtensionToIcon,\n  convertToBreadcrumbData,\n  removeDataItem,\n  editDataItem\n} from './helpers/helperMethods';\nimport { ContextMenu } from './components/ContextMenu';\n\nconst splitterPanes: PanesModel[] = [\n  {\n    size: \"20%\",\n    min: \"20px\",\n    collapsible: true,\n  },\n  {},\n  {\n    size: \"30%\",\n    min: \"20px\",\n    collapsible: true,\n  },\n];\n\nconst initialSort: SortDescriptor[] = [{\n  field: 'name',\n  dir: 'asc'\n}];\n\nconst DATA_ITEM_KEY = 'name';\nconst SELECTED_FIELD = \"selected\";\nconst idGetter = getter(DATA_ITEM_KEY);\n\nconst App = () => {\n  const intl = useInternationalization();\n  let FOLDER_NAME_COUNTER = 0;\n\n  const [stateData, setStateData] = React.useState<DataModel[]>(formatData(serverData, intl));\n  const [panes, setPanes] = React.useState<PanesModel[]>(splitterPanes);\n\n  const [selectedGridItem, setSelectedGridItem] = React.useState<SelectedItemType>({});\n  const [selectedTreeItem, setSelectedTreeItem] = React.useState<DataModel | null>(null);\n\n  const [detailsData, setDetailsData] = React.useState<null | number | Object>(null);\n  const [files, setFiles] = React.useState<UploadFileInfo[]>([]);\n  const [contentView, setContentView] = React.useState<string>(\"grid\");\n  const [contextMenuView, setContextMenuView] = React.useState<boolean>(false);\n  const [menuOffSet, setMenuOffSet] = React.useState<Offset>({left: 0, top: 0});\n  const [editDialogView, setEditDialogView] = React.useState<boolean>(false);\n  const [deleteDialogView, setDeleteDialogView] = React.useState<boolean>(false);\n\n  const splitBtnItems: SplitBtnItems[] = [\n    { text: 'Name', value: 'name' },\n    { text: 'File Size', value: 'size'},\n    { text: 'Date Created', value: 'dateCreated'}\n  ];\n\n  const initialLogic: \"and\" | \"or\" = \"and\";\n \n  const [stateContentData, setStateContentData] = React.useState<State>({\n    sort: initialSort,\n    filter: {\n      logic: initialLogic,\n      filters: [\n        { field: 'name', operator: 'contains', value: '' }\n      ]\n    }\n  });\n\n  const updateFileDetailsData = React.useCallback(\n    (selection: SelectedItemType) => {\n      const numberOfSelectedItems: number = Object.keys(selection).length;\n\n      if (numberOfSelectedItems > 1) {\n        setDetailsData(Object.keys(selection).length);\n      } else if (numberOfSelectedItems === 1) {\n        const curSelectedItem = { name: Object.keys(selection)[0] };\n        setDetailsData(searchTreeItem(stateData, curSelectedItem))\n      } else {\n        setDetailsData(null);\n      }\n    },\n    [stateData]\n  );\n\n  const handleTreeItemClick = (event: TreeViewItemClickEvent) => {\n    const newSelectedItem: DataModel = searchTreeItem(stateData, event.item);\n    newSelectedItem.expanded = true;\n\n    setDetailsData(event.item);\n    setSelectedTreeItem(newSelectedItem);\n    setSelectedGridItem({});\n  }\n\n  const handleSplitterChange = (event: SplitterOnChangeEvent) => {\n    setPanes(event.newState);\n  };\n\n  const handleSelectionChange = (event: SelectionChangeEvent) => {\n    let selectedState: SelectedItemType;\n\n    if (event.pressedKey) {\n      selectedState = getSelectedStateFromKeyDown({\n        event: event.event,\n        selectedState: selectedGridItem,\n        dataItemKey: DATA_ITEM_KEY\n      });\n    } else {\n      selectedState = getSelectedState({\n        event: event,\n        selectedState: selectedGridItem,\n        dataItemKey: DATA_ITEM_KEY\n      });\n    }\n    setSelectedGridItem(selectedState);\n    updateFileDetailsData(selectedState);\n  };\n\n  const handleSortChange = (event: SortChangeEvent) => {\n    const newSortedData = clone(stateContentData);\n    \n    if (event.direction === 'asc' || event.direction === 'desc') {\n      newSortedData.sort[0].dir = event.direction;\n    }\n\n    if (event.item) {\n      newSortedData.sort[0].field = event.item.value;\n    }\n\n    if (event.sort) {\n      newSortedData.sort = event.sort;\n    }\n    setStateContentData(newSortedData);\n  };\n\n  const handleGridDoubleClick = (event: GridRowDoubleClickEvent) => {\n    const itemType = convertExtensionToIcon(event.dataItem.name);\n    if (itemType?.type === 'Folder') {\n      if (selectedTreeItem) {\n        selectedTreeItem.expanded = true;\n      }\n\n      const newSelectedItem = event.dataItem;\n      newSelectedItem.expanded = true;\n      setSelectedTreeItem(searchTreeItem(stateData, newSelectedItem));\n    }\n  };\n\n  const handleNewFolderClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let newData;\n    if (selectedTreeItem) {\n      newData = addFolder(stateData, selectedTreeItem, intl);\n    } else {\n      newData = addFolder(stateData, null, intl);\n    }\n    setStateData(newData);\n    setSelectedTreeItem(searchTreeItem(newData, selectedTreeItem));\n  };\n\n  const handleSearchChange = (event: InputChangeEvent) => {\n    setStateContentData({\n        ...stateContentData,\n        filter: {\n          logic: initialLogic,\n          filters: [\n            { field: 'name', operator: 'contains', value: event.value }\n          ]\n        }\n    });\n  };\n\n  const handleSwitchChange = (event: AppSwitchChangeEvent) => {\n    const newPanes: PanesModel[] = panes.slice(0)\n    if (event.value) {\n      newPanes[2].size = '30%';\n      setPanes(newPanes)\n    } else {\n      newPanes[2].size = '0%';\n      setPanes(newPanes)\n    }\n  };\n\n  const handleViewChange = (event: ViewChangeEvent) => {\n    if (event.viewValue.gridView) {\n      setContentView('grid');\n    }\n    if (event.viewValue.listView) {\n      setContentView('list');\n    }\n  };\n\n  const handleFileChange = (event: UploadAddEvent) => {\n    if (event.files) {\n      setFiles(event.files);\n    }\n  };\n\n  const handleClearFileList = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (event) {\n      setFiles([]);\n    }\n  };\n\n  const handleUploadDone = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const data: DataModel | any = addDataItem(stateData, selectedTreeItem, files, intl);\n\n    setStateData(data.updatedData);\n    setSelectedTreeItem(data.selectedItem);\n    setFiles([]);\n  };\n\n  const handleBreadcrumbSelection = (event: BreadcrumbLinkMouseEvent) => {\n    setSelectedGridItem({});\n\n    if (!event.nativeEvent.keyCode) {\n      const newItem = searchTreeItem(stateData, { name: event.id });\n      setSelectedTreeItem(newItem);\n    }\n\n    if (event.nativeEvent.keyCode === 13) {\n      const newItem = searchTreeItem(stateData, { name: event.id });\n      setSelectedTreeItem(newItem);\n    }\n  };\n\n  const handleDialogClick = (event) => {\n    if (event.type === 'cancel') {\n      setDeleteDialogView(false);\n      setEditDialogView(false);\n    }\n    \n    const curItem = Object.keys(selectedGridItem).length ? selectedGridItem : selectedTreeItem;\n    if (!curItem) { return; }\n\n    if (event.type === 'delete') {\n      const newTreeItem = convertToBreadcrumbData(stateData, curItem);\n      if (newTreeItem) {\n        newTreeItem.pop();\n    \n        setSelectedTreeItem(newTreeItem[newTreeItem.length-1]);\n        removeDataItem(stateData, curItem);\n      }\n      setDeleteDialogView(false);\n    }\n\n    if (event.type === 'rename') {\n      setEditDialogView(false);\n      const newItem = searchTreeItem(stateData, {name: event.value});\n      if (newItem.name !== event.value) {\n        editDataItem(stateData, curItem, newItem ? `${event.value}(${FOLDER_NAME_COUNTER})` : event.value);\n      }\n    }\n  };\n\n  const handleListItemClick = (event) => {\n    setSelectedGridItem(event.dataItem);\n    updateFileDetailsData(event.dataItem);\n  };\n\n  const handleContextMenuView = (event: ContextMenuEvent) => {\n    setContextMenuView(true);\n    setMenuOffSet({left: event.event.clientX, top: event.event.clientY });\n  };\n\n  const handleContextMenuClick = (event: ContextMenuEvent) => {\n    if (event.itemId === \"0\") {\n      setEditDialogView(true);\n    } else {\n      setDeleteDialogView(true);\n    }\n  };\n\n  const handleDialogClose = () => {\n    setDeleteDialogView(false);\n    setEditDialogView(false);\n  };\n\n  document.addEventListener(\"click\", () => {\n    setContextMenuView(false);\n  });\n\n  return (\n     <div className=\"k-widget k-filemanager k-filemanager-resizable\">\n        <div className=\"k-filemanager-header\">\n          <FileManagerToolbar\n            splitItems={splitBtnItems}\n            sort={stateContentData.sort}\n            files={files}\n            onNewFolderClick={handleNewFolderClick}\n            onSearchChange={handleSearchChange}\n            onSwitchChange={handleSwitchChange}\n            onViewChange={handleViewChange}\n            onSortChange={handleSortChange}\n\n            onFileChange={handleFileChange}\n            onClearFileList={handleClearFileList}\n            onUploadDone={handleUploadDone}\n            />\n        </div>\n      <div className=\"k-filemanager-content-container\">\n        <Splitter\n          panes={panes} \n          onChange={handleSplitterChange} \n          >\n          <FolderTree \n            data={convertToTreeData(stateData, selectedTreeItem)}\n            selected={selectedTreeItem}\n            selectedItem={selectedTreeItem}\n            onItemClick={handleTreeItemClick}\n            onContextMenu={handleContextMenuView}\n            />\n          <div className=\"k-filemanager-content\">\n            <BreadcrumbComponent \n              data={convertToBreadcrumbData(stateData, selectedTreeItem)}\n              onBreadcrumbSelect={handleBreadcrumbSelection}\n              />\n            {contentView === 'grid'\n              ? <GridView\n                  data={selectedTreeItem && selectedTreeItem.items\n                    ? process((selectedTreeItem.items.slice().map(item => ({\n                      ...item,\n                      [SELECTED_FIELD]: selectedGridItem[idGetter(item)],\n                      })))\n                      , stateContentData)\n                    : convertToBreadcrumbData(stateData, null).length > 0 && !selectedTreeItem\n                      ? process((stateData.slice().map(item => ({\n                        ...item,\n                        [SELECTED_FIELD]: selectedGridItem[idGetter(item)],\n                        })))\n                        , stateContentData)\n                      : null\n                  }\n                  sort={stateContentData.sort}\n                  dataItemKey={DATA_ITEM_KEY}\n                  onSelectionChange={handleSelectionChange}\n                  onSortChange={handleSortChange}\n                  onDoubleClick={handleGridDoubleClick}\n                  onContextMenu={handleContextMenuView}\n                  />\n              : <ListView\n                  data={selectedTreeItem && selectedTreeItem.items\n                    ? process((selectedTreeItem.items.slice().map(item => ({\n                      ...item,\n                      [SELECTED_FIELD]: selectedGridItem[idGetter(item)],\n                      })))\n                      , stateContentData)\n                    : convertToBreadcrumbData(stateData, null).length > 0 && !selectedTreeItem\n                      ? process((stateData.slice().map(item => ({\n                        ...item,\n                        [SELECTED_FIELD]: selectedGridItem[idGetter(item)],\n                        })))\n                        , stateContentData)\n                      : null \n                  }\n                  onSelectionChange={handleSelectionChange}\n                  onItemClick={handleListItemClick}\n                  onDoubleClick={handleGridDoubleClick}\n                  onContextMenu={handleContextMenuView}\n                />\n            }\n            { contextMenuView ? <ContextMenu offset={menuOffSet} onContextMenuCLick={handleContextMenuClick}/> : '' }\n            { editDialogView \n              ? <EditDialog \n                  editValue={Object.keys(selectedGridItem).length ? selectedGridItem : selectedTreeItem}\n                  onDialogClose={handleDialogClose}\n                  onDialogClick={handleDialogClick}\n                  /> \n              : '' }\n            { deleteDialogView ? <DeleteDialog onDialogClose={handleDialogClose} onDialogClick={handleDialogClick} /> : '' }\n          </div>\n          <FileInformation data={detailsData} />\n        </Splitter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}