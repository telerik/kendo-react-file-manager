{"version":3,"sources":["helpers/helperMethods.tsx","components/FileManagerToolbar.tsx","components/GridView.tsx","components/ListView.tsx","components/FileInformation.tsx","components/FolderTree.tsx","components/Breadcrumb.tsx","components/Dialog.tsx","data/data.ts","components/ContextMenu.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["convertExtensionToIcon","item","extension","split","length","toLowerCase","iconClass","type","getName","path","pop","getFolderPath","pathArr","join","convertDateFormat","date","intl","formatDate","mapData","data","map","name","dateCreated","dateModified","size","icon","items","formatData","getFolderTree","selectedItem","newItems","index","currentItem","includes","push","selected","searchTreeItem","foundItem","addDataItem","files","forEach","file","Date","FOLDER_NAME_COUNTER","addFolder","folderName","toggleViewBtnGroup","btnGroupState","view","listView","gridView","toggleSortBtnGroup","curState","sortDesc","sortAsc","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","editDataItem","newPath","removeDataItem","convertToBreadcrumbData","id","curItemPath","FileManagerToolbar","props","React","dialogVisible","setDialogVisible","viewBtnGroup","setViewBtnGroup","handleDialogVisibility","event","handleFileChange","onFileChange","newState","className","onClick","onNewFolderClick","title","onClose","contentStyle","width","batch","multiple","withCredentials","onAdd","onRemove","onProgress","onStatusChange","saveUrl","removeUrl","layout","onClearFileList","primary","onUploadComplete","togglable","sort","dir","newBtnGroupState","onSortChange","direction","sortValue","text","splitItems","onItemClick","onViewChange","viewValue","defaultChecked","onChange","onSwitchChange","placeholder","onSearchChange","DateCreatedCell","useInternationalization","field","dataItem","navigationAttributes","useTableKeyboardNavigation","GRID_COL_INDEX_ATTRIBUTE","columnIndex","SizeCell","NameCell","classNames","GridView","handleContextMenu","onContextMenu","rowRender","trElement","trProps","preventDefault","children","style","height","navigatable","sortable","allowUnsort","selectedField","selectable","enabled","cell","drag","mode","dataItemKey","onRowClick","onSelectionChange","onMultipleSelection","onRowDoubleClick","onDoubleClick","ListView","handleClick","handleDoubleClick","FileInformation","MultipleSelectionRendering","FileSelectionRendering","NoDataRendering","border","FolderTree","handleEdit","onItemEdit","handleBlur","onItemBlur","tree","edit","autoFocus","value","e","onBlur","textField","expandIcons","onExpandChange","BreadcrumbComponent","onItemSelect","onBreadcrumbSelect","onKeyDown","EditDialog","editValue","inputValue","setInputValue","handleDialogClick","onDialogClick","target","onDialogClose","margin","textAlign","maxLength","DeleteDialog","serverData","ContextMenu","show","offset","vertical","display","onSelect","onContextMenuCLick","splitterPanes","min","collapsible","initialSort","DATA_ITEM_KEY","SELECTED_FIELD","idGetter","getter","App","stateData","setStateData","panes","setPanes","selectedGridItem","setSelectedGridItem","selectedTreeItem","setSelectedTreeItem","gridSelection","setGridSelection","detailsData","setDetailsData","setFiles","contentView","setContentView","contextMenuView","setContextMenuView","left","top","menuOffSet","setMenuOffSet","editDialogView","setEditDialogView","deleteDialogView","setDeleteDialogView","filter","logic","filters","operator","stateContentData","setStateContentData","updateFileDetailsData","selection","newSelectedItem","Object","keys","handleSelectionChange","key","toString","handleMultipleSelection","newSelection","getSelectedState","selectedState","handleSortChange","newSortedData","clone","handleGridDoubleClick","itemType","expanded","curItem","oldPath","updatedData","newItemPath","folderPath","handleListItemClick","newSelectedGridItem","newSelectedTreeItem","handleContextMenuView","clientX","clientY","handleDialogClose","document","addEventListener","newData","newTreeItem","eventPath","curPath","newPanes","slice","nativeEvent","keyCode","newItem","process","itemId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0a54d042.chunk.js","sourcesContent":["import { UploadFileInfo } from '@progress/kendo-react-upload';\nimport { clone } from '@progress/kendo-react-common';\nimport { BreadcrumbDataModel, DataModel, GridViewBtnGroup, SortingBtnGroup } from '../interfaces/FileManagerModels';\n\nexport const convertExtensionToIcon = (item: string | null | undefined) => {\n  if (!item) { return null; }\n  const extension: string | null = item.split('.').length > 1 ? item.split('.')[1] : null;\n\n  switch (extension ? extension.toLowerCase() : null) {\n    case 'pdf':\n      return {\n        iconClass: 'k-i-file-pdf k-i-pdf',\n        type: 'Data'\n      };\n    case 'ppt': case 'pptx':\n      return {\n        iconClass: 'k-i-file-ppt k-i-ppt',\n        type: 'Data'\n      };\n    case 'xlsx': case 'xls':\n      return {\n        iconClass: 'k-i-file-data',\n        type: 'Data'\n      };\n    case 'jpg': case 'png':\n      return {\n        iconClass: 'k-i-file-image',\n        type: 'Image'\n      };\n    case 'txt': case 'doc': case 'docx':\n      return {\n        iconClass: 'k-i-file-txt',\n        type: 'Text'\n      };\n    case 'mp3': case 'mp4': case 'mp':\n      return {\n        iconClass: 'k-i-audio',\n        type: 'Text'\n      };\n    case null:\n      return {\n        iconClass: 'k-i-folder',\n        type: 'Folder'\n      };\n    default:\n      return {\n        iconClass: 'k-i-file k-i-file-vertical',\n        type: 'Folder'\n      };\n  };\n};\n\nexport const getName = (path: string | undefined) => {\n  if (!path) { return path; }\n  return path.split('/').pop();\n}\n\nexport const getFolderPath = (path: string | undefined) => {\n  if (!path) { return path; }\n  const pathArr = path.split('/');\n  pathArr.pop();\n  return pathArr.join('/');\n}\n\nexport const convertDateFormat = (date: Date | null, intl) => {\n  return date ? intl.formatDate(date, 'd.MM.y  h:mm:ss aa  EEEE') : date;\n};\n\nconst mapData = (data, intl) => {\n  if (!data) { return []; }\n\n  return data.map(item => {\n    const name = getName(item.path);\n    return {\n      path: item.path,\n      dateCreated: convertDateFormat(item.dateCreated || null, intl),\n      dateModified: convertDateFormat(item.dateModified || null, intl),\n      size: item.size,\n      icon: convertExtensionToIcon(name),\n      items: item.items && item.items.length ? mapData(item.items, intl) : []\n    }\n  });\n};\n\nexport const formatData = (data: DataModel[], intl) => {\n  return mapData(data, intl);\n};\n\nexport const getFolderTree = (data: DataModel[], selectedItem: DataModel | null = null) => {\n  if (!data) { return data; }\n  const newItems: DataModel[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const currentItem = { ...data[index] };\n    if (currentItem.path && !currentItem.path.includes('.')) {\n      if (currentItem.items && currentItem.items.length) {\n        currentItem.items = getFolderTree(currentItem.items, selectedItem);\n      }\n      newItems.push({\n        ...currentItem,\n        selected: selectedItem ? selectedItem.path === currentItem.path : false,\n      });\n    }\n  }\n  return newItems;\n};\n\nexport const searchTreeItem = (data, selectedItem: DataModel | null) => {\n  if (!selectedItem) { return data; }\n\n  for (let index = 0; index < data.length; index++) {\n    const currentItem = data[index];\n    if (currentItem.path === selectedItem.path) {\n      return currentItem;\n    }\n    if (currentItem.items && currentItem.items.length) {\n      const foundItem = searchTreeItem(currentItem.items, selectedItem);\n      if (foundItem) {\n        return foundItem;\n      }\n    }\n  }\n};\n\nexport const addDataItem = (data: DataModel[], selectedItem: DataModel | null = null, files: UploadFileInfo[], intl) => {\n  if (!selectedItem) {\n    files.forEach(file => {\n      data.push({\n        path: `Home/${file.name}`,\n        dateCreated: convertDateFormat(new Date(), intl),\n        dateModified: convertDateFormat(new Date(), intl),\n        size: file.size,\n        icon: convertExtensionToIcon(file.extension)\n      });\n    });\n\n    return data;\n  }\n\n  if (!data) { return data; }\n\n  return data.map((item) => {\n    const currentItem = { ...item };\n\n    if (currentItem.path === selectedItem.path) {\n      files.forEach(file => {\n\n        if (!currentItem.items) {\n          currentItem.items = [];\n        }\n\n        currentItem.items.push({\n          path: `${currentItem.path}/${file.name}`,\n          dateCreated: convertDateFormat(new Date(), intl),\n          dateModified: convertDateFormat(new Date(), intl),\n          size: file.size,\n          icon: convertExtensionToIcon(file.extension)\n        });\n\n      });\n\n    } else if (currentItem.items && currentItem.items.length) {\n      currentItem.items = addDataItem(currentItem.items, selectedItem, files, intl);\n    }\n\n    return currentItem;\n  });\n};\n\nlet FOLDER_NAME_COUNTER = 0;\nexport const addFolder = (data: DataModel[], selectedItem: DataModel | null, intl) => {\n  if (!selectedItem) {\n    const folderName = FOLDER_NAME_COUNTER ? `New Folder (${FOLDER_NAME_COUNTER})` : 'New Folder';\n    FOLDER_NAME_COUNTER++;\n\n    data.push({\n      path: `Home/${folderName}`,\n      dateCreated: convertDateFormat(new Date(), intl),\n      dateModified: convertDateFormat(new Date(), intl),\n      size: 124,\n      icon: convertExtensionToIcon(folderName)\n    });\n\n    return data.map(item => item);\n  }\n\n  if (!data) { return data; }\n\n  return data.map(item => {\n    const currentItem = { ...item };\n\n    if (currentItem.path === selectedItem?.path) {\n      const folderName = FOLDER_NAME_COUNTER ? `New Folder (${FOLDER_NAME_COUNTER})` : 'New Folder';\n      FOLDER_NAME_COUNTER++;\n\n      if (!currentItem.items) {\n        currentItem.items = [];\n      }\n\n      currentItem.items.push({\n        path: `${currentItem.path}/${folderName}`,\n        dateCreated: convertDateFormat(new Date(), intl),\n        dateModified: convertDateFormat(new Date(), intl),\n        size: 124,\n        icon: convertExtensionToIcon(folderName)\n      });\n\n    } else if (currentItem.items && currentItem.items.length) {\n      addFolder(currentItem.items, selectedItem, intl);\n    }\n\n    return currentItem;\n  });\n};\n\nexport const toggleViewBtnGroup = (btnGroupState: GridViewBtnGroup, view: string) => {\n  if (!btnGroupState.listView && view !== 'grid') {\n    return { gridView: false, listView: true };\n  }\n  if (!btnGroupState.gridView && view !== 'list') {\n    return { gridView: true, listView: false };\n  }\n  return btnGroupState;\n};\n\nexport const toggleSortBtnGroup = (btnGroupState: SortingBtnGroup, curState: string) => {\n  if (!btnGroupState.sortDesc && curState !== 'asc') {\n    return { sortAsc: false, sortDesc: true };\n  }\n  if (!btnGroupState.sortAsc && curState !== 'desc') {\n    return { sortAsc: true, sortDesc: false };\n  }\n  return btnGroupState;\n};\n\nexport const formatBytes = (bytes: number, decimals: number = 2) => {\n  if (bytes === 0) return '0 Bytes';\n\n  const k: number = 1024;\n  const dm: number = decimals < 0 ? 0 : decimals;\n  const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n  const i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n};\n\nexport const editDataItem = (data, selectedItem: DataModel, newPath: string) => {\n  if (!data) { return data; }\n  const newItems: DataModel[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const currentItem = { ...data[index] };\n    if (currentItem.path === selectedItem.path) {\n      currentItem.path = newPath;\n      currentItem.dateModified = new Date();\n    }\n\n    if (currentItem.items) {\n      currentItem.items = editDataItem(currentItem.items, selectedItem, newPath);\n    }\n    newItems.push(currentItem);\n  }\n  return newItems;\n};\n\nexport const removeDataItem = (data, selectedItem: DataModel) => {\n  if (!data) { return data; }\n  const newItems: DataModel[] = [];\n\n  for (let index = 0; index < data.length; index++) {\n    const currentItem = { ...data[index] };\n    if (currentItem.path !== selectedItem.path) {\n      if (currentItem.items && currentItem.items.length) {\n        currentItem.items = removeDataItem(currentItem.items, selectedItem);\n      }\n\n      newItems.push(currentItem);\n    }\n  }\n  return newItems;\n};\n\nexport const convertToBreadcrumbData = (selectedItem: DataModel | null) => {\n  let path: BreadcrumbDataModel[] = [];\n\n  if (!selectedItem) {\n    return [{\n      id: 'Home',\n      name: 'Home',\n      iconClass: 'k-i-home'\n    }];\n  }\n\n  if (selectedItem.path) {\n    const items = selectedItem.path.split('/');\n    let curItemPath: string[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      curItemPath.push(items[i])\n\n      if (items[i] === 'Home') {\n        path.push({\n          id: 'Home',\n          name: items[i],\n          iconClass: 'k-i-home'\n        });\n      } else {\n        path.push({\n          id: curItemPath.join('/'),\n          name: items[i]\n        });\n      }\n    }\n  }\n  return path;\n};\n","import * as React from 'react';\nimport {\n  Toolbar,\n  Button,\n  ButtonGroup,\n  SplitButton,\n  SplitButtonItemClickEvent\n} from '@progress/kendo-react-buttons';\nimport { Switch, Input, InputChangeEvent, SwitchChangeEvent } from \"@progress/kendo-react-inputs\";\nimport { Dialog, DialogActionsBar } from '@progress/kendo-react-dialogs';\nimport { Upload } from '@progress/kendo-react-upload';\nimport { BaseEvent } from '@progress/kendo-react-common';\nimport { toggleViewBtnGroup, toggleSortBtnGroup } from '../helpers/helperMethods';\nimport { GridViewBtnGroup, UploadAddEvent } from '../interfaces/FileManagerModels';\n\nexport const FileManagerToolbar = (props) => {\n  const [dialogVisible, setDialogVisible] = React.useState<boolean>(false);\n  const [viewBtnGroup, setViewBtnGroup] = React.useState<GridViewBtnGroup>({ gridView: true, listView: false });\n\n  const handleSearchChange = (event: InputChangeEvent) => {\n    props.onSearchChange(event);\n  };\n\n  const handleSwitchChange = (event: SwitchChangeEvent) => {\n    props.onSwitchChange(event);\n  };\n\n  const handleGridViewChange = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (event) {\n      const newBtnGroupState = toggleViewBtnGroup(viewBtnGroup, 'grid');\n      setViewBtnGroup(newBtnGroupState);\n\n      props.onViewChange({\n        viewValue: newBtnGroupState,\n        event: event\n      });\n    }\n  };\n\n  const handleAscBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (event) {\n      const newBtnGroupState = toggleSortBtnGroup(props.sort[0].dir, 'asc');\n      props.onSortChange({\n        direction: 'asc',\n        sortValue: newBtnGroupState,\n        event: event\n      });\n    }\n  };\n\n  const handleDescSortBtnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const newBtnGroupState = toggleSortBtnGroup(props.sort[0].dir, 'desc');\n    props.onSortChange({\n      direction: 'desc',\n      sortValue: newBtnGroupState,\n      event: event\n    });\n  };\n\n  const handleListViewChange = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (event) {\n      const newBtnGroupState = toggleViewBtnGroup(viewBtnGroup, 'list');\n      setViewBtnGroup(newBtnGroupState);\n\n      props.onViewChange({\n        viewValue: newBtnGroupState,\n        event: event\n      });\n    }\n  };\n\n  const handleItemClick = (event: SplitButtonItemClickEvent) => {\n    props.onSortChange(event);\n  };\n\n  const handleNewFolderClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    props.onNewFolderClick(event);\n  }\n\n  const handleDialogVisibility = (event: BaseEvent<Dialog> | React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setDialogVisible(!dialogVisible);\n  };\n\n  const handleFileChange = (event: UploadAddEvent) => {\n    props.onFileChange({\n      files: event.newState,\n      event: event\n    });\n  };\n\n  const handleUploadClearList = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    props.onClearFileList(event);\n  };\n\n  const handleUploadDone = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setDialogVisible(!dialogVisible);\n    props.onUploadComplete(event);\n  };\n\n  return (\n    <Toolbar className=\"k-filemanager-toolbar\">\n      <Button onClick={handleNewFolderClick}>New Folder</Button>\n      <Button onClick={handleDialogVisibility}>Upload</Button>\n      { dialogVisible &&\n        <Dialog\n          title={'Upload Files'}\n          className={'k-filemanager-upload-dialog'}\n          onClose={handleDialogVisibility}\n          contentStyle={{ width: '530px' }}\n          >\n          <Upload\n            batch={false}\n            multiple={true}\n            files={props.files}\n            withCredentials={false}\n            onAdd={handleFileChange}\n            onRemove={handleFileChange}\n            onProgress={handleFileChange}\n            onStatusChange={handleFileChange}\n            saveUrl={'https://demos.telerik.com/kendo-ui/service-v4/upload/save'}\n            removeUrl={'https://demos.telerik.com/kendo-ui/service-v4/upload/remove'}\n            />\n          <DialogActionsBar layout={'end'}>\n            <Button onClick={handleUploadClearList} > Clear List</Button>\n            <Button primary={true} onClick={handleUploadDone}> Done </Button>\n          </DialogActionsBar>\n        </Dialog >\n      }\n      <ButtonGroup>\n        <Button\n          className=\"k-toggle-button k-button-icon k-group-start\"\n          togglable={true}\n          selected={props.sort[0].dir === 'asc'}\n          onClick={handleAscBtnClick}\n          >\n          <span className=\"k-icon k-i-sort-asc-sm\"></span>\n        </Button>\n        <Button\n          className=\"k-toggle-button k-button k-button-icon k-group-end\"\n          togglable={true}\n          selected={props.sort[0].dir === 'desc'}\n          onClick={handleDescSortBtnClick}\n          >\n          <span className=\"k-icon k-i-sort-desc-sm\"></span>\n        </Button>\n      </ButtonGroup>\n      <SplitButton\n        text={'Sort By'}\n        items={props.splitItems}\n        onItemClick={handleItemClick}\n        >\n      </SplitButton>\n      <ButtonGroup>\n        <Button\n          className={\"k-toggle-button k-button-icon k-group-start\"}\n          togglable={true}\n          selected={viewBtnGroup.gridView}\n          onClick={handleGridViewChange}\n          >\n          <span className=\"k-icon k-i-grid-layout\"></span>\n        </Button>\n        <Button\n          className={\"k-toggle-button k-button-icon k-group-end\"}\n          togglable={true}\n          selected={viewBtnGroup.listView}\n          onClick={handleListViewChange}\n          >\n          <span className=\"k-icon k-i-grid\"></span>\n        </Button>\n      </ButtonGroup>\n      <div className=\"k-spacer\">&nbsp;</div>\n      <div className=\"k-filemanager-details-toggle\">\n        <label>View Details</label>\n        <Switch defaultChecked={true} onChange={handleSwitchChange} >\n          <Input type=\"checkbox\"/>\n          <span className=\"k-switch-container\">\n            <span className=\"k-switch-label-on\">On</span>\n            <span className=\"k-switch-label-off\">Off</span>\n            <span className=\"k-switch-handle\"></span>\n          </span>\n        </Switch>\n      </div>\n      <div className=\"k-filemanager-search-tool k-textbox k-toolbar-last-visible\" >\n        <Input className=\"k-input\" placeholder=\"Search\" onChange={handleSearchChange}/>\n        <span className=\"k-input-icon\">\n          <span className=\"k-icon k-i-search\"></span>\n        </span>\n      </div>\n    </Toolbar>\n  );\n}\n","import * as React from 'react';\nimport {\n  Grid,\n  GridCellProps,\n  GridColumn as Column,\n  GridRowClickEvent,\n  GridRowDoubleClickEvent,\n  GridSortChangeEvent,\n  GRID_COL_INDEX_ATTRIBUTE\n} from '@progress/kendo-react-grid';\nimport { useTableKeyboardNavigation } from '@progress/kendo-react-data-tools';\nimport { useInternationalization } from '@progress/kendo-react-intl';\nimport { classNames } from '@progress/kendo-react-common';\nimport { convertDateFormat, getName, formatBytes } from '../helpers/helperMethods';\n\nconst DateCreatedCell  = (props: GridCellProps) => {\n  const intl = useInternationalization();\n\n  const field: string = props.field || '';\n  const date: Date = props.dataItem[field];\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      {date === null ? '' : convertDateFormat(date, intl)}\n    </td>\n  );\n};\n\nconst SizeCell = (props: GridCellProps) => {\n  const size: number = props.dataItem[props.field || ''];\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      {size === null ? '' : formatBytes(size)}\n    </td>\n  );\n};\n\nconst NameCell = (props: GridCellProps) => {\n  const navigationAttributes = useTableKeyboardNavigation(props.id);\n  const name = getName(props.dataItem.path);\n\n  return (\n    <td\n      {...{ [GRID_COL_INDEX_ATTRIBUTE]: props.columnIndex }}\n      {...navigationAttributes}\n    >\n      <span className={classNames('k-icon', props.dataItem.icon ? props.dataItem.icon.iconClass : '')} />\n      {name}\n    </td>\n  );\n};\n\nexport const GridView = (props) => {\n  const RowRender = (trElement, dataItem) => {\n    const trProps = {\n      onContextMenu: (event) => {\n        event.preventDefault()\n        handleContextMenu(event, dataItem);\n      }\n    }\n    return React.cloneElement(trElement, { ...trProps }, trElement.props.children);\n  };\n\n  const handleOnSortChange = (event: GridSortChangeEvent) => {\n    props.onSortChange({\n      sort: event.sort,\n      event: event\n    });\n  };\n\n  const handleSelectionChange = (event: GridRowClickEvent) => {\n    props.onSelectionChange(event);\n  };\n\n  const handleMultipleSelection = (event) => {\n    props.onMultipleSelection(event);\n  };\n\n  const handleDoubleClick = (event: GridRowDoubleClickEvent) => {\n    props.onDoubleClick(event);\n  };\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, dataItem) => {\n    props.onContextMenu({\n      dataItem: dataItem.dataItem,\n      event: event\n    });\n  };\n\n  return (\n    <Grid\n      data={props.data}\n      rowRender={RowRender}\n      className={'k-filemanager-grid k-grid-display-block k-editable'}\n      style={{ height: '100%' }}\n      navigatable={true}\n      sortable={{\n        allowUnsort: false\n      }}\n      sort={props.sort}\n      selectedField={'selected'}\n      selectable={{ enabled: true, cell: false, drag: true, mode: 'multiple' }}\n      dataItemKey={props.dataItemKey}\n      onRowClick={handleSelectionChange}\n      onSelectionChange={handleMultipleSelection}\n      onSortChange={handleOnSortChange}\n      onRowDoubleClick={handleDoubleClick}\n      >\n      <Column field='path' title='Name' cell={NameCell} />\n      <Column field='dateCreated' title='Date Created' cell={DateCreatedCell} />\n      <Column field='size' title='Size' cell={SizeCell} />\n    </Grid>\n  );\n}\n","import { classNames } from '@progress/kendo-react-common';\nimport { getName } from '../helpers/helperMethods';\nimport { DataModel } from './../interfaces/FileManagerModels';\n\nexport const ListView = (props) => {\n  const handleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n    props.onItemClick({\n      dataItem: item,\n      event: event\n    });\n  };\n\n  const handleDoubleClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n    props.onDoubleClick({\n      dataItem: item,\n      event: event\n    });\n  };\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLDivElement, MouseEvent>, item: DataModel) => {\n    event.preventDefault();\n    props.onContextMenu({\n      dataItem: item,\n      event: event\n    });\n  };\n\n  return (\n    <div className=\"k-listview k-selectable k-filemanager-listview\">\n      <div className=\"k-listview-content k-d-flex k-flex-row k-flex-wrap\">\n        { props.data\n        ? props.data.data.map((item: any) => {\n          const name = getName(item.path);\n          return (\n          <>\n            <div className={classNames(\"k-listview-item\", { \"k-state-selected\": item.selected })}\n              onClick={event => handleClick(event, item)}\n              onDoubleClick={event => handleDoubleClick(event, item)}\n              onContextMenu={event => handleContextMenu(event, item)}\n              >\n            <span className=\"k-file-preview\">\n              <span className={classNames(\"k-file-icon k-icon\", item.icon ? item.icon.iconClass : '')} />\n            </span>\n            <span className=\"k-file-name\">{name}</span>\n            </div>\n          </>\n          )\n        })\n      : '' }\n      </div>\n    </div>\n  );\n}\n","import { useInternationalization } from '@progress/kendo-react-intl';\nimport { convertDateFormat, getName, formatBytes } from '../helpers/helperMethods';\nimport { classNames } from '@progress/kendo-react-common';\nimport { DataModel } from '../interfaces/FileManagerModels';\n\nexport const FileInformation = (props) => {\n  return (\n    props.data\n      ? typeof props.data === 'number' ? MultipleSelectionRendering(props.data) : FileSelectionRendering(props.data)\n      : NoDataRendering());\n}\n\nconst NoDataRendering = () => {\n  return (\n    <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n      <div className=\"k-file-info\">\n        <span className=\"k-file-preview\"><span className=\"k-file-icon k-icon k-i-none\"></span></span>\n        <span className=\"k-file-name k-no-file-selected\">No File Selected</span>\n      </div>\n    </div>\n  )\n}\n\nconst FileSelectionRendering = (item: DataModel) => {\n  const intl = useInternationalization();\n  const dateCreated: Date = convertDateFormat(item.dateCreated ? item.dateCreated : null, intl);\n  const dateModified: Date = convertDateFormat(item.dateModified ? item.dateModified : null, intl);\n\n  return (\n    <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n      <div className=\"k-file-info\">\n        <span className=\"k-file-preview\">\n          <span className={classNames(\"k-file-icon k-icon\", item.icon ? item.icon.iconClass : '')}></span>\n        </span>\n        <span className=\"k-file-name k-single-file-selected\">{item.path? getName(item.path) : ''}</span>\n        <dl className=\"k-file-meta\">\n          <dt className=\"k-file-meta-label\">Type:  </dt>\n          <dd className= {\"k-file-meta-value k-file-type\"}> {item.icon ? item.icon.type : ''}</dd>\n          <dd className=\"k-line-break\"></dd>\n          <dt className=\"k-file-meta-label\">Size:  </dt>\n          <dd className=\"k-file-meta-value k-file-size\"> {item.size ? formatBytes(item.size) : ''}</dd>\n          <dd className=\"k-line-break\"></dd>\n          <dt className=\"k-file-meta-label\">Date Created:  </dt>\n          <dd className=\"k-file-meta-value k-file-created\"> {dateCreated ? dateCreated : ''}</dd>\n          <dd className=\"k-line-break\"></dd>\n          <dt className=\"k-file-meta-label\">Date Modified:  </dt>\n          <dd className=\"k-file-meta-value k-file-modified\"> {dateModified ? dateModified : ''}</dd>\n          <dd className=\"k-line-break\"></dd>\n        </dl>\n      </div>\n    </div>\n  );\n}\n\nconst MultipleSelectionRendering = (length: number) => {\n  return (\n    <div className=\"k-filemanager-preview\" style={{ width: '100%', border: 0 }}>\n      <div className=\"k-file-info\">\n        <span className=\"k-file-preview\" style={{ width: '100%', border: 0 }}>\n          <span className=\"k-file-icon k-icon k-i-file\"></span></span>\n        <span className=\"k-file-name k-multiple-files-selected\">{length} items</span>\n      </div>\n    </div>\n  );\n}\n","import { ItemRenderProps, TreeView, TreeViewExpandChangeEvent, TreeViewItemClickEvent } from '@progress/kendo-react-treeview'\nimport { getName } from '../helpers/helperMethods';\nimport { DataModel } from '../interfaces/FileManagerModels';\n\nexport const FolderTree = (props) => {\n  const handleEdit = (event: React.ChangeEvent<HTMLInputElement>, item: DataModel) => {\n    props.onItemEdit({\n      item,\n      event\n    });\n  };\n\n  const handleBlur = (event: React.ChangeEvent<HTMLInputElement>, item: DataModel) => {\n    props.onItemBlur({\n      item,\n      event\n    });\n  };\n\n  const handleExpandChange = (event: TreeViewExpandChangeEvent) => {\n    props.onItemClick({\n      item: event.item,\n      event\n    });\n  };\n\n  const handleItemClick = (event: TreeViewItemClickEvent) => {\n    if (event.item) {\n      props.onItemClick({\n        item: event.item,\n        event\n      });\n    }\n  };\n\n  const handleContextMenu = (event: React.MouseEvent<HTMLSpanElement, MouseEvent>, item: DataModel) => {\n    event.preventDefault();\n    props.onContextMenu({\n      tree: true,\n      dataItem: item,\n      event\n    });\n  };\n\n  const TreeViewItem = (props: ItemRenderProps) => {\n    if (props.item.edit) {\n      return (\n        <span>\n        <input className='k-textbox'\n          autoFocus\n          value={props.item.path}\n          onChange={(e) => handleEdit(e, props.item)}\n          onBlur={(e) => handleBlur(e, props.item)} />\n        </span>\n      );\n    }\n    const name = getName(props.item.path);\n    return (\n      <span onContextMenu={(event) => handleContextMenu(event, props.item)}>{name}</span>\n    );\n  };\n\n  return (\n    <TreeView\n      data={props.data}\n      item={TreeViewItem}\n      className=\"k-filemanager-treeview\"\n      textField=\"path\"\n      expandIcons={true}\n      onExpandChange={handleExpandChange}\n      onItemClick={handleItemClick}\n    />\n  );\n}\n","import { Breadcrumb, BreadcrumbLinkMouseEvent, BreadcrumbLinkKeyDownEvent } from '@progress/kendo-react-layout';\n\nexport const BreadcrumbComponent = (props) => {\n  const handleItemSelect = (event: BreadcrumbLinkMouseEvent) => {\n      props.onBreadcrumbSelect(event);\n  };\n\n  const handleKeyDown = (event: BreadcrumbLinkKeyDownEvent) => {\n    props.onBreadcrumbSelect(event);\n  };\n\n  return (\n      <Breadcrumb\n        data={props.data ? props.data : ''}\n        textField={'name'}\n        onItemSelect={handleItemSelect}\n        onKeyDown={handleKeyDown}\n        />\n  );\n};\n","import * as React from 'react';\nimport { Dialog as DialogComponent, DialogActionsBar, DialogCloseEvent } from '@progress/kendo-react-dialogs';\nimport { Input, InputChangeEvent } from '@progress/kendo-react-inputs';\nimport { getName } from '../helpers/helperMethods';\n\nexport const EditDialog = (props) => {\n  const [inputValue, setInputValue] = React.useState(props.editValue);\n\n  const handleDialogClick = (event) => {\n    props.onDialogClick({\n      event,\n      path: props.editValue.path,\n      value: typeof(inputValue) === 'string' ? inputValue : inputValue.path,\n      type: event.target.value\n    });\n  };\n\n  const handleDialogClose = (event: DialogCloseEvent) => {\n    props.onDialogClose(event);\n  };\n\n  const handleInputChange = (event: InputChangeEvent) => {\n    setInputValue(event.value);\n  };\n\n  return (\n    <DialogComponent title={'Please confirm'} onClose={handleDialogClose}>\n      <p style={{ width: '350px', margin: '25px', textAlign: 'center' }}>Enter new name for the file.</p>\n      <Input\n          maxLength={40}\n          value={getName(inputValue.path)}\n          style={{ width: '350px', margin: '25px', textAlign: 'center' }}\n          className={'k-textbox'}\n          onChange={handleInputChange}\n          />\n      <DialogActionsBar>\n        <button value={'rename'} className='k-button k-state-selected' onClick={handleDialogClick}>Rename</button>\n        <button value={'cancel'} className='k-button' onClick={handleDialogClick}>Cancel</button>\n      </DialogActionsBar>\n    </DialogComponent>\n  );\n}\n\nexport const DeleteDialog = (props) => {\n  const handleDialogClick = (event) => {\n    props.onDialogClick({\n      event,\n      type: event.target.value\n    });\n  };\n\n  const handleDialogClose = (event) => {\n    props.onDialogClose(event);\n  };\n\n  return (\n    <DialogComponent title={'Please confirm'} onClose={handleDialogClose}>\n      <p style={{ width: '350px', margin: '25px', textAlign: 'center' }}>Are you sure you want to delete the selected file? You cannot undo this action.</p>\n      <DialogActionsBar>\n        <button value={'delete'} className='k-button k-state-selected' onClick={handleDialogClick}>Delete</button>\n        <button value={'cancel'} className='k-button' onClick={handleDialogClick}>Cancel</button>\n      </DialogActionsBar>\n    </DialogComponent>\n  );\n}\n","import { DataModel } from \"../interfaces/FileManagerModels\";\n\nexport const serverData: DataModel[] = [\n  {\n    path: \"Home/Picture.jpg\",\n    size: 4555,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: []\n  }, {\n    path: \"Home/Documents\",\n    size: 100000,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        path: \"Home/Documents/Presentation.ppt\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        path: \"Home/Documents/shared\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            path: \"Home/Documents/shared/important.pdf\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }, {\n            path: \"Home/Documents/shared/program.docx\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }, {\n            path: \"Home/Documents/shared/university\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        path: \"Home/Documents/diploma.pdf\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  }, {\n    path: \"Home/Pictures\",\n    size: 30,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        path: \"Home/Pictures/Vacation\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        path: \"Home/Pictures/Bulgaria\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            path: \"Home/Pictures/Bulgaria/sea.jpg\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }, {\n            path: \"Home/Pictures/Bulgaria/beach.jpg\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        path: \"Home/Pictures/view.jpg\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  },\n  {\n    path: \"Home/Music\",\n    size: 10554,\n    dateCreated: new Date(),\n    dateModified: new Date(),\n    items: [\n      {\n        path: \"Home/Music/music.mp3\",\n        size: 200,\n        dateCreated: new Date(),\n        dateModified: null\n      },\n      {\n        path: \"Home/Music/new\",\n        size: 202665,\n        dateCreated: new Date(),\n        dateModified: null,\n        items: [\n          {\n            path: \"Home/Music/new/real.mp3\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          },\n          {\n            path: \"Home/Music/new/shakira.mp3\",\n            size: 20,\n            dateCreated: new Date(),\n            dateModified: null\n          }\n        ],\n      },\n      {\n        path: \"Home/Music/home.jpg\",\n        size: 50,\n        dateCreated: new Date(),\n        dateModified: null\n      }\n    ]\n  }\n];\n","\nimport { Menu, MenuItem, MenuSelectEvent } from '@progress/kendo-react-layout';\nimport { Popup } from '@progress/kendo-react-popup';\nimport { ContextMenuProps } from '../interfaces/FileManagerModels';\n\nexport const ContextMenu = (props: ContextMenuProps) => {\n  const handleSelection = (event:  MenuSelectEvent) => {\n    props.onContextMenuCLick(event);\n  };\n\n  return (\n    <Popup show={true} offset={props.offset}>\n        <Menu vertical={true} style={{ display: 'inline-block' }} onSelect={handleSelection}>\n            <MenuItem text=\"Rename\" icon={'k-icon k-i-edit'} />\n            <MenuItem text=\"Delete\" icon={'k-icon k-i-delete'} />\n        </Menu>\n    </Popup>\n  );\n}\n","import * as React from 'react';\n\nimport '@progress/kendo-theme-default/dist/all.css';\nimport { Splitter, SplitterOnChangeEvent, BreadcrumbLinkMouseEvent } from '@progress/kendo-react-layout';\nimport { useInternationalization } from '@progress/kendo-react-intl';\nimport { process, SortDescriptor, State } from '@progress/kendo-data-query';\nimport { clone, getter } from '@progress/kendo-react-common';\nimport { GridRowDoubleClickEvent, GridRowClickEvent, getSelectedState } from '@progress/kendo-react-grid';\nimport { UploadFileInfo } from '@progress/kendo-react-upload';\nimport { TreeViewItemClickEvent } from '@progress/kendo-react-treeview';\nimport { InputChangeEvent } from '@progress/kendo-react-inputs';\nimport { Offset } from '@progress/kendo-react-popup';\n\nimport { FileManagerToolbar } from './components/FileManagerToolbar';\nimport { GridView } from './components/GridView';\nimport { ListView } from './components/ListView';\nimport { FileInformation } from './components/FileInformation';\nimport { FolderTree } from './components/FolderTree';\nimport { BreadcrumbComponent } from './components/Breadcrumb';\nimport { DeleteDialog, EditDialog } from './components/Dialog';\n\nimport { serverData } from './data/data';\nimport {\n  DataModel,\n  PanesModel,\n  SplitBtnItems,\n  SelectedItemType,\n  UploadAddEvent,\n  ViewChangeEvent,\n  SortChangeEvent,\n  AppSwitchChangeEvent,\n  ContextMenuEvent\n} from './interfaces/FileManagerModels';\nimport {\n  formatData,\n  getFolderTree,\n  searchTreeItem,\n  addDataItem,\n  addFolder,\n  convertExtensionToIcon,\n  convertToBreadcrumbData,\n  removeDataItem,\n  editDataItem,\n  getFolderPath\n} from './helpers/helperMethods';\nimport { ContextMenu } from './components/ContextMenu';\n\nconst splitterPanes: PanesModel[] = [\n  {\n    size: '20%',\n    min: '20px',\n    collapsible: true,\n  },\n  {},\n  {\n    size: '30%',\n    min: '20px',\n    collapsible: true,\n  },\n];\n\nconst initialSort: SortDescriptor[] = [{\n  field: 'path',\n  dir: 'asc'\n}];\n\nconst DATA_ITEM_KEY = 'path';\nconst SELECTED_FIELD = 'selected';\nconst idGetter = getter(DATA_ITEM_KEY);\n\nconst App = () => {\n  const intl = useInternationalization();\n\n  const [stateData, setStateData] = React.useState<DataModel[]>(formatData(serverData, intl));\n  const [panes, setPanes] = React.useState<PanesModel[]>(splitterPanes);\n\n  const [selectedGridItem, setSelectedGridItem] = React.useState<DataModel>({});\n  const [selectedTreeItem, setSelectedTreeItem] = React.useState<DataModel | null>(null);\n  const [gridSelection, setGridSelection] = React.useState<{ [id: string]: boolean | number[]; }>({});\n\n  const [detailsData, setDetailsData] = React.useState<null | number | Object>(null);\n  const [files, setFiles] = React.useState<UploadFileInfo[]>([]);\n  const [contentView, setContentView] = React.useState<string>('grid');\n  const [contextMenuView, setContextMenuView] = React.useState<boolean>(false);\n  const [menuOffSet, setMenuOffSet] = React.useState<Offset>({ left: 0, top: 0 });\n  const [editDialogView, setEditDialogView] = React.useState<boolean>(false);\n  const [deleteDialogView, setDeleteDialogView] = React.useState<boolean>(false);\n\n  const splitBtnItems: SplitBtnItems[] = [\n    { text: 'Name', value: 'path' },\n    { text: 'File Size', value: 'size' },\n    { text: 'Date Created', value: 'dateCreated' }\n  ];\n\n  const initialLogic: 'and' | 'or' = 'and';\n\n  const [stateContentData, setStateContentData] = React.useState<State>({\n    sort: initialSort,\n    filter: {\n      logic: initialLogic,\n      filters: [\n        { field: 'path', operator: 'contains', value: '' }\n      ]\n    }\n  });\n\n  const updateFileDetailsData = React.useCallback(\n    (selection: SelectedItemType) => {\n      if (selection.path) {\n        const newSelectedItem = searchTreeItem(stateData, selection)\n        setDetailsData(newSelectedItem);\n      } else if (!selection.path && Object.keys(selection).length) {\n        setDetailsData(Object.keys(selection).length);\n      }\n      else {\n        setDetailsData(null);\n      }\n    },\n    [stateData]\n  );\n\n  const handleTreeItemClick = (event: TreeViewItemClickEvent) => {\n    const newSelectedItem: DataModel = searchTreeItem(stateData, event.item);\n    newSelectedItem.expanded = !event.item.expanded;\n\n    setSelectedTreeItem(newSelectedItem);\n    setDetailsData(event.item);\n    setSelectedGridItem({});\n    setGridSelection({});\n  };\n\n  const handleSplitterChange = (event: SplitterOnChangeEvent) => {\n    setPanes(event.newState);\n  };\n\n  const handleSelectionChange = (event: GridRowClickEvent) => {\n    setSelectedGridItem(event.dataItem);\n    updateFileDetailsData(event.dataItem);\n    if (event.dataItem.path) {\n      const key = event.dataItem['path'].toString();\n      setGridSelection({ [key]: true });\n    }\n  };\n\n  const handleMultipleSelection = (event) => {\n    const newSelection = getSelectedState({\n      event,\n      selectedState: gridSelection,\n      dataItemKey: DATA_ITEM_KEY\n    });\n\n    setGridSelection(newSelection);\n    updateFileDetailsData(newSelection);\n  }\n\n  const handleSortChange = (event: SortChangeEvent) => {\n    const newSortedData = clone(stateContentData);\n\n    if (event.direction === 'asc' || event.direction === 'desc') {\n      newSortedData.sort[0].dir = event.direction;\n    }\n\n    if (event.item) {\n      newSortedData.sort[0].field = event.item.value;\n    }\n\n    if (event.sort) {\n      newSortedData.sort = event.sort;\n    }\n    setStateContentData(newSortedData);\n  };\n\n  const handleGridDoubleClick = (event: GridRowDoubleClickEvent) => {\n    const itemType = convertExtensionToIcon(event.dataItem.path);\n    if (itemType?.type === 'Folder') {\n      if (selectedTreeItem) {\n        selectedTreeItem.expanded = true;\n      }\n\n      const newSelectedItem = event.dataItem;\n      newSelectedItem.expanded = true;\n      setSelectedTreeItem(searchTreeItem(stateData, newSelectedItem));\n    }\n  };\n\n  const handleNewFolderClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    let newData;\n    if (selectedTreeItem) {\n      newData = addFolder(stateData, selectedTreeItem, intl);\n      const newTreeItem = searchTreeItem(newData, selectedTreeItem);\n      setSelectedTreeItem(newTreeItem);\n    } else {\n      newData = addFolder(stateData, null, intl);\n    }\n    setStateData(newData);\n  };\n\n  const handleSearchChange = (event: InputChangeEvent) => {\n    let eventPath = '';\n    if (selectedTreeItem?.items) {\n      const curPath = getFolderPath(selectedTreeItem.items[0].path);\n      eventPath = `${curPath}/${event.value}`;\n    } else {\n      const curPath = getFolderPath(stateData[0].path);\n      eventPath = `${curPath}/${event.value}`;\n    }\n\n    setStateContentData({\n      ...stateContentData,\n      filter: {\n        logic: initialLogic,\n        filters: [\n          { field: 'path', operator: 'contains', value: eventPath }\n        ]\n      }\n    });\n  };\n\n  const handleSwitchChange = (event: AppSwitchChangeEvent) => {\n    const newPanes: PanesModel[] = panes.slice(0)\n    if (event.value) {\n      newPanes[2].size = '30%';\n      setPanes(newPanes)\n    } else {\n      newPanes[2].size = '0%';\n      setPanes(newPanes)\n    }\n  };\n\n  const handleViewChange = (event: ViewChangeEvent) => {\n    if (event.viewValue.gridView) {\n      setContentView('grid');\n    }\n    if (event.viewValue.listView) {\n      setContentView('list');\n    }\n  };\n\n  const handleFileChange = (event: UploadAddEvent) => {\n    if (event.files) {\n      setFiles(event.files);\n    }\n  };\n\n  const handleClearFileList = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (event) {\n      setFiles([]);\n    }\n  };\n\n  const handleUploadComplete = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    const newData: DataModel | any = addDataItem(stateData, selectedTreeItem, files, intl);\n\n    setStateData(newData);\n    setFiles([]);\n  };\n\n\n  const handleBreadcrumbSelection = (event: BreadcrumbLinkMouseEvent) => {\n    setSelectedGridItem({});\n    setGridSelection({});\n\n    if (!event.nativeEvent.keyCode) {\n      const newItem = searchTreeItem(stateData, { path: event.id });\n      setSelectedTreeItem(newItem);\n    }\n\n    if (event.nativeEvent.keyCode === 13) {\n      const newItem = searchTreeItem(stateData, { path: event.id });\n      setSelectedTreeItem(newItem);\n    }\n  };\n\n  const handleDialogClick = (event) => {\n    if (event.type === 'cancel') {\n      setDeleteDialogView(false);\n      setEditDialogView(false);\n    }\n\n    const curItem: DataModel | null = Object.keys(selectedGridItem).length ? selectedGridItem : selectedTreeItem;\n    if (!curItem) { return; }\n\n    if (event.type === 'delete') {\n      const newItem: string = curItem.path || '';\n      const oldPath = newItem.split('/');\n\n      oldPath.pop();\n\n      const updatedData = removeDataItem(stateData, curItem);\n      let newItemPath = oldPath.join('/');\n\n      setSelectedTreeItem(searchTreeItem(updatedData, { path: newItemPath }));\n      setStateData(updatedData);\n      setDeleteDialogView(false);\n    }\n\n    if (event.type === 'rename') {\n      const folderPath = getFolderPath(event.path);\n      const newPath = `${folderPath}/${event.value}`\n\n      const existingItem = searchTreeItem(stateData, { path: newPath });\n      if (!existingItem) {\n        const updatedData = editDataItem(stateData, curItem, newPath);\n        setSelectedTreeItem(searchTreeItem(updatedData, { path: newPath }))\n        setStateData(updatedData);\n      }\n      setEditDialogView(false);\n    }\n  };\n\n  const handleListItemClick = (event) => {\n    let newSelectedGridItem = {};\n    if (event.dataItem.path) {\n      newSelectedGridItem = event.dataItem;\n      newSelectedGridItem[event.dataItem.path] = true;\n      newSelectedGridItem['selected'] = true;\n\n      setSelectedGridItem(newSelectedGridItem);\n      if (event.dataItem.path) {\n        const key = event.dataItem.path.toString();\n        setGridSelection({ [key]: true });\n      }\n\n    }\n\n    if (event.tree) {\n      const newSelectedTreeItem: DataModel = searchTreeItem(stateData, newSelectedGridItem);\n      setSelectedTreeItem(newSelectedTreeItem);\n    }\n    updateFileDetailsData(newSelectedGridItem);\n  };\n\n\n  const handleContextMenuView = (event: ContextMenuEvent) => {\n    setContextMenuView(true);\n    setMenuOffSet({ left: event.event.clientX, top: event.event.clientY });\n    handleListItemClick(event);\n  };\n\n  const handleContextMenuClick = (event: ContextMenuEvent) => {\n    if (event.itemId === '0') {\n      setEditDialogView(true);\n    } else {\n      setDeleteDialogView(true);\n    }\n  };\n\n  const handleDialogClose = () => {\n    setDeleteDialogView(false);\n    setEditDialogView(false);\n  };\n\n  document.addEventListener('click', () => {\n    setContextMenuView(false);\n  });\n\n  return (\n    <div className='k-widget k-filemanager k-filemanager-resizable'>\n      <div className='k-filemanager-header'>\n        <FileManagerToolbar\n          splitItems={splitBtnItems}\n          sort={stateContentData.sort}\n          files={files}\n          onNewFolderClick={handleNewFolderClick}\n          onSearchChange={handleSearchChange}\n          onSwitchChange={handleSwitchChange}\n          onViewChange={handleViewChange}\n          onSortChange={handleSortChange}\n\n          onFileChange={handleFileChange}\n          onClearFileList={handleClearFileList}\n          onUploadComplete={handleUploadComplete}\n        />\n      </div>\n      <div className='k-filemanager-content-container'>\n        <Splitter\n          panes={panes}\n          onChange={handleSplitterChange}\n        >\n          <FolderTree\n            data={getFolderTree(stateData, selectedTreeItem)}\n            selected={selectedTreeItem}\n            selectedItem={selectedTreeItem}\n            onItemClick={handleTreeItemClick}\n            onContextMenu={handleContextMenuView}\n          />\n          <div className='k-filemanager-content'>\n            <BreadcrumbComponent\n              data={convertToBreadcrumbData(selectedTreeItem)}\n              onBreadcrumbSelect={handleBreadcrumbSelection}\n            />\n            {contentView === 'grid'\n              ? <GridView\n                data={selectedTreeItem && selectedTreeItem.items\n                  ? process((selectedTreeItem.items.map(item => ({\n                    ...item,\n                    [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                  })))\n                    , stateContentData)\n                  : !selectedTreeItem\n                    ? process((stateData.map(item => ({\n                      ...item,\n                      [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                    })))\n                      , stateContentData)\n                    : null\n                }\n                sort={stateContentData.sort}\n                dataItemKey={DATA_ITEM_KEY}\n                onSelectionChange={handleSelectionChange}\n                onMultipleSelection={handleMultipleSelection}\n                onSortChange={handleSortChange}\n                onDoubleClick={handleGridDoubleClick}\n                onContextMenu={handleContextMenuView}\n              />\n              : <ListView\n                data={selectedTreeItem && selectedTreeItem.items\n                  ? process((selectedTreeItem.items.map(item => ({\n                    ...item,\n                    [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                  })))\n                    , stateContentData)\n                  : !selectedTreeItem\n                    ? process((stateData.map(item => ({\n                      ...item,\n                      [SELECTED_FIELD]: gridSelection[idGetter(item)],\n                    })))\n                      , stateContentData)\n                    : null\n                }\n                onSelectionChange={handleSelectionChange}\n                onMultipleSelection={handleMultipleSelection}\n                onItemClick={handleListItemClick}\n                onDoubleClick={handleGridDoubleClick}\n                onContextMenu={handleContextMenuView}\n              />\n            }\n            {contextMenuView ? <ContextMenu offset={menuOffSet} onContextMenuCLick={handleContextMenuClick} /> : ''}\n            {editDialogView\n              ? <EditDialog\n                editValue={Object.keys(selectedGridItem).length ? selectedGridItem : selectedTreeItem}\n                onDialogClose={handleDialogClose}\n                onDialogClick={handleDialogClick}\n              />\n              : ''}\n            {deleteDialogView ? <DeleteDialog onDialogClose={handleDialogClose} onDialogClick={handleDialogClick} /> : ''}\n          </div>\n          <FileInformation data={detailsData} />\n        </Splitter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}